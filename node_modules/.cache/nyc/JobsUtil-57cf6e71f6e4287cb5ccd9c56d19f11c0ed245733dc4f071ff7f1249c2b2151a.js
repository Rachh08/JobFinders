function cov_1fy6yjvtr2(){var path="C:\\Users\\Rache\\OneDrive\\Documents\\DVOPS_Projects\\final(2)\\JobFinders\\utils\\JobsUtil.js";var hash="a4e398ed2882fe558b2721bb52f294d901696b11";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Rache\\OneDrive\\Documents\\DVOPS_Projects\\final(2)\\JobFinders\\utils\\JobsUtil.js",statementMap:{"0":{start:{line:1,column:32},end:{line:1,column:53}},"1":{start:{line:2,column:16},end:{line:2,column:44}},"2":{start:{line:52,column:4},end:{line:78,column:5}},"3":{start:{line:54,column:22},end:{line:54,column:32}},"4":{start:{line:56,column:8},end:{line:58,column:9}},"5":{start:{line:57,column:12},end:{line:57,column:102}},"6":{start:{line:61,column:8},end:{line:63,column:9}},"7":{start:{line:62,column:12},end:{line:62,column:98}},"8":{start:{line:66,column:24},end:{line:66,column:57}},"9":{start:{line:69,column:30},end:{line:69,column:108}},"10":{start:{line:69,column:52},end:{line:69,column:107}},"11":{start:{line:71,column:8},end:{line:75,column:9}},"12":{start:{line:72,column:12},end:{line:72,column:55}},"13":{start:{line:74,column:12},end:{line:74,column:80}},"14":{start:{line:77,column:8},end:{line:77,column:64}},"15":{start:{line:81,column:0},end:{line:81,column:32}}},fnMap:{"0":{name:"searchJobs",decl:{start:{line:51,column:15},end:{line:51,column:25}},loc:{start:{line:51,column:36},end:{line:79,column:1}},line:51},"1":{name:"(anonymous_1)",decl:{start:{line:69,column:45},end:{line:69,column:46}},loc:{start:{line:69,column:52},end:{line:69,column:107}},line:69}},branchMap:{"0":{loc:{start:{line:56,column:8},end:{line:58,column:9}},type:"if",locations:[{start:{line:56,column:8},end:{line:58,column:9}},{start:{line:56,column:8},end:{line:58,column:9}}],line:56},"1":{loc:{start:{line:61,column:8},end:{line:63,column:9}},type:"if",locations:[{start:{line:61,column:8},end:{line:63,column:9}},{start:{line:61,column:8},end:{line:63,column:9}}],line:61},"2":{loc:{start:{line:71,column:8},end:{line:75,column:9}},type:"if",locations:[{start:{line:71,column:8},end:{line:75,column:9}},{start:{line:71,column:8},end:{line:75,column:9}}],line:71}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a4e398ed2882fe558b2721bb52f294d901696b11"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1fy6yjvtr2=function(){return actualCoverage;};}return actualCoverage;}cov_1fy6yjvtr2();const{readJSON,writeJSON}=(cov_1fy6yjvtr2().s[0]++,require('./UserUtil'));const{Job}=(cov_1fy6yjvtr2().s[1]++,require('../models/jobs.js'));// async function addJobs(req, res) {
//     try {
//         const jobName = req.body.jobName;
//         const company = req.body.company;
//         const location = req.body.location;
//         const description = req.body.description;
//         const contact = req.body.contact;
//         // Check if any of the input fields is empty
//         if (!jobName || !company || !location || !description || !contact) {
//             return res.status(400).json({ message: 'All input fields must be filled.' });
//         }
//          // Validate jobName and company fields
//          const onlyAlpha= /^[A-Za-z\s]{1,50}$/; // Alphabets and spaces, up to 50 characters
//          if (!onlyAlpha.test(jobName) || !onlyAlpha.test(company)) {
//              return res.status(400).json({ message: 'Job name and company must contain alphabets only and be up to 50 characters long.' });
//          }
//          //Validate contact to include only 1 @ so that user provides contact email
//          const oneSpecial = /^[^@]*@[^@]+$/;
//          if(!oneSpecial.test(contact)) {
//             return res.status(400).json({message: "Provide valid contact details: email"})
//          } 
//         const newJob = new Job(jobName, company, location, description, contact);
//         const updatedJob = await writeJSON(newJob, 'utils/jobs.json');
//         return res.status(201).json(updatedJob);
//     } catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
// async function viewJobs(req, res) {
//     try {
//         const allJobs = await readJSON('utils/jobs.json');
//         return res.status(201).json(allJobs);
//     } catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
async function searchJobs(req,res){cov_1fy6yjvtr2().f[0]++;cov_1fy6yjvtr2().s[2]++;try{// Assuming you have the search query in the request body
const query=(cov_1fy6yjvtr2().s[3]++,req.body.q);cov_1fy6yjvtr2().s[4]++;if(!query){cov_1fy6yjvtr2().b[0][0]++;cov_1fy6yjvtr2().s[5]++;return res.status(400).json({message:"Search query is required in the request body."});}else{cov_1fy6yjvtr2().b[0][1]++;}// Check if the query contains only letters
cov_1fy6yjvtr2().s[6]++;if(!/^[a-zA-Z]+$/.test(query)){cov_1fy6yjvtr2().b[1][0]++;cov_1fy6yjvtr2().s[7]++;return res.status(400).json({message:"Search query should only contain letters."});}else{cov_1fy6yjvtr2().b[1][1]++;}// Read jobs from the JSON file
const allJobs=(cov_1fy6yjvtr2().s[8]++,await readJSON('utils/jobs.json'));// Filter jobs based on the query matching jobName
const searchResults=(cov_1fy6yjvtr2().s[9]++,allJobs.filter(job=>{cov_1fy6yjvtr2().f[1]++;cov_1fy6yjvtr2().s[10]++;return job.jobName.toLowerCase().includes(query.toLowerCase());}));cov_1fy6yjvtr2().s[11]++;if(searchResults.length>0){cov_1fy6yjvtr2().b[2][0]++;cov_1fy6yjvtr2().s[12]++;return res.status(200).json(searchResults);}else{cov_1fy6yjvtr2().b[2][1]++;cov_1fy6yjvtr2().s[13]++;return res.status(404).json({message:"No matching jobs found."});}}catch(error){cov_1fy6yjvtr2().s[14]++;return res.status(500).json({message:error.message});}}cov_1fy6yjvtr2().s[15]++;module.exports={searchJobs};// module.exports = { viewJobs, addJobs, searchJobs };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWZ5NnlqdnRyMiIsImFjdHVhbENvdmVyYWdlIiwicmVhZEpTT04iLCJ3cml0ZUpTT04iLCJzIiwicmVxdWlyZSIsIkpvYiIsInNlYXJjaEpvYnMiLCJyZXEiLCJyZXMiLCJmIiwicXVlcnkiLCJib2R5IiwicSIsImIiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsInRlc3QiLCJhbGxKb2JzIiwic2VhcmNoUmVzdWx0cyIsImZpbHRlciIsImpvYiIsImpvYk5hbWUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwibGVuZ3RoIiwiZXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiSm9ic1V0aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyByZWFkSlNPTiwgd3JpdGVKU09OIH0gPSByZXF1aXJlKCcuL1VzZXJVdGlsJylcclxuY29uc3QgeyBKb2IgfSA9IHJlcXVpcmUoJy4uL21vZGVscy9qb2JzLmpzJyk7XHJcblxyXG5cclxuXHJcbi8vIGFzeW5jIGZ1bmN0aW9uIGFkZEpvYnMocmVxLCByZXMpIHtcclxuLy8gICAgIHRyeSB7XHJcbi8vICAgICAgICAgY29uc3Qgam9iTmFtZSA9IHJlcS5ib2R5LmpvYk5hbWU7XHJcbi8vICAgICAgICAgY29uc3QgY29tcGFueSA9IHJlcS5ib2R5LmNvbXBhbnk7XHJcbi8vICAgICAgICAgY29uc3QgbG9jYXRpb24gPSByZXEuYm9keS5sb2NhdGlvbjtcclxuLy8gICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHJlcS5ib2R5LmRlc2NyaXB0aW9uO1xyXG4vLyAgICAgICAgIGNvbnN0IGNvbnRhY3QgPSByZXEuYm9keS5jb250YWN0O1xyXG5cclxuLy8gICAgICAgICAvLyBDaGVjayBpZiBhbnkgb2YgdGhlIGlucHV0IGZpZWxkcyBpcyBlbXB0eVxyXG4vLyAgICAgICAgIGlmICgham9iTmFtZSB8fCAhY29tcGFueSB8fCAhbG9jYXRpb24gfHwgIWRlc2NyaXB0aW9uIHx8ICFjb250YWN0KSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdBbGwgaW5wdXQgZmllbGRzIG11c3QgYmUgZmlsbGVkLicgfSk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuXHJcbi8vICAgICAgICAgIC8vIFZhbGlkYXRlIGpvYk5hbWUgYW5kIGNvbXBhbnkgZmllbGRzXHJcbi8vICAgICAgICAgIGNvbnN0IG9ubHlBbHBoYT0gL15bQS1aYS16XFxzXXsxLDUwfSQvOyAvLyBBbHBoYWJldHMgYW5kIHNwYWNlcywgdXAgdG8gNTAgY2hhcmFjdGVyc1xyXG4vLyAgICAgICAgICBpZiAoIW9ubHlBbHBoYS50ZXN0KGpvYk5hbWUpIHx8ICFvbmx5QWxwaGEudGVzdChjb21wYW55KSkge1xyXG4vLyAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0pvYiBuYW1lIGFuZCBjb21wYW55IG11c3QgY29udGFpbiBhbHBoYWJldHMgb25seSBhbmQgYmUgdXAgdG8gNTAgY2hhcmFjdGVycyBsb25nLicgfSk7XHJcbi8vICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgIC8vVmFsaWRhdGUgY29udGFjdCB0byBpbmNsdWRlIG9ubHkgMSBAIHNvIHRoYXQgdXNlciBwcm92aWRlcyBjb250YWN0IGVtYWlsXHJcbi8vICAgICAgICAgIGNvbnN0IG9uZVNwZWNpYWwgPSAvXlteQF0qQFteQF0rJC87XHJcbi8vICAgICAgICAgIGlmKCFvbmVTcGVjaWFsLnRlc3QoY29udGFjdCkpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHttZXNzYWdlOiBcIlByb3ZpZGUgdmFsaWQgY29udGFjdCBkZXRhaWxzOiBlbWFpbFwifSlcclxuLy8gICAgICAgICAgfSBcclxuXHJcbi8vICAgICAgICAgY29uc3QgbmV3Sm9iID0gbmV3IEpvYihqb2JOYW1lLCBjb21wYW55LCBsb2NhdGlvbiwgZGVzY3JpcHRpb24sIGNvbnRhY3QpO1xyXG5cclxuLy8gICAgICAgICBjb25zdCB1cGRhdGVkSm9iID0gYXdhaXQgd3JpdGVKU09OKG5ld0pvYiwgJ3V0aWxzL2pvYnMuanNvbicpO1xyXG4vLyAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih1cGRhdGVkSm9iKTtcclxuLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuLy8gYXN5bmMgZnVuY3Rpb24gdmlld0pvYnMocmVxLCByZXMpIHtcclxuLy8gICAgIHRyeSB7XHJcbi8vICAgICAgICAgY29uc3QgYWxsSm9icyA9IGF3YWl0IHJlYWRKU09OKCd1dGlscy9qb2JzLmpzb24nKTtcclxuLy8gICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oYWxsSm9icyk7XHJcbi8vICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4vLyAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBzZWFyY2hKb2JzKHJlcSwgcmVzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIEFzc3VtaW5nIHlvdSBoYXZlIHRoZSBzZWFyY2ggcXVlcnkgaW4gdGhlIHJlcXVlc3QgYm9keVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gcmVxLmJvZHkucTtcclxuXHJcbiAgICAgICAgaWYgKCFxdWVyeSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiBcIlNlYXJjaCBxdWVyeSBpcyByZXF1aXJlZCBpbiB0aGUgcmVxdWVzdCBib2R5LlwiIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHF1ZXJ5IGNvbnRhaW5zIG9ubHkgbGV0dGVyc1xyXG4gICAgICAgIGlmICghL15bYS16QS1aXSskLy50ZXN0KHF1ZXJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiBcIlNlYXJjaCBxdWVyeSBzaG91bGQgb25seSBjb250YWluIGxldHRlcnMuXCIgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZWFkIGpvYnMgZnJvbSB0aGUgSlNPTiBmaWxlXHJcbiAgICAgICAgY29uc3QgYWxsSm9icyA9IGF3YWl0IHJlYWRKU09OKCd1dGlscy9qb2JzLmpzb24nKTtcclxuXHJcbiAgICAgICAgLy8gRmlsdGVyIGpvYnMgYmFzZWQgb24gdGhlIHF1ZXJ5IG1hdGNoaW5nIGpvYk5hbWVcclxuICAgICAgICBjb25zdCBzZWFyY2hSZXN1bHRzID0gYWxsSm9icy5maWx0ZXIoam9iID0+IGpvYi5qb2JOYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkudG9Mb3dlckNhc2UoKSkpO1xyXG5cclxuICAgICAgICBpZiAoc2VhcmNoUmVzdWx0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihzZWFyY2hSZXN1bHRzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiBcIk5vIG1hdGNoaW5nIGpvYnMgZm91bmQuXCIgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHsgc2VhcmNoSm9icyB9O1xyXG5cclxuLy8gbW9kdWxlLmV4cG9ydHMg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