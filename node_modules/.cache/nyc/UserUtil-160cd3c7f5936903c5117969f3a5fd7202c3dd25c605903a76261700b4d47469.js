function cov_2gvn0myxsl(){var path="C:\\Users\\annsj\\Documents\\DVOPS_Projects\\Final\\JobFinders\\utils\\UserUtil.js";var hash="e6a537819cff3243bc588ff1022913bc75bbcc53";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\annsj\\Documents\\DVOPS_Projects\\Final\\JobFinders\\utils\\UserUtil.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:42}},"1":{start:{line:2,column:11},end:{line:2,column:33}},"2":{start:{line:176,column:4},end:{line:199,column:5}},"3":{start:{line:177,column:33},end:{line:177,column:48}},"4":{start:{line:178,column:32},end:{line:178,column:49}},"5":{start:{line:180,column:25},end:{line:180,column:59}},"6":{start:{line:181,column:34},end:{line:181,column:92}},"7":{start:{line:181,column:61},end:{line:181,column:91}},"8":{start:{line:183,column:8},end:{line:196,column:9}},"9":{start:{line:184,column:33},end:{line:184,column:60}},"10":{start:{line:187,column:12},end:{line:193,column:13}},"11":{start:{line:188,column:16},end:{line:188,column:54}},"12":{start:{line:189,column:16},end:{line:189,column:89}},"13":{start:{line:190,column:16},end:{line:190,column:109}},"14":{start:{line:192,column:16},end:{line:192,column:97}},"15":{start:{line:195,column:12},end:{line:195,column:94}},"16":{start:{line:198,column:8},end:{line:198,column:64}},"17":{start:{line:204,column:0},end:{line:206,column:2}}},fnMap:{"0":{name:"deleteUser",decl:{start:{line:175,column:15},end:{line:175,column:25}},loc:{start:{line:175,column:36},end:{line:200,column:1}},line:175},"1":{name:"(anonymous_1)",decl:{start:{line:181,column:53},end:{line:181,column:54}},loc:{start:{line:181,column:61},end:{line:181,column:91}},line:181}},branchMap:{"0":{loc:{start:{line:183,column:8},end:{line:196,column:9}},type:"if",locations:[{start:{line:183,column:8},end:{line:196,column:9}},{start:{line:183,column:8},end:{line:196,column:9}}],line:183},"1":{loc:{start:{line:187,column:12},end:{line:193,column:13}},type:"if",locations:[{start:{line:187,column:12},end:{line:193,column:13}},{start:{line:187,column:12},end:{line:193,column:13}}],line:187}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"e6a537819cff3243bc588ff1022913bc75bbcc53"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2gvn0myxsl=function(){return actualCoverage;};}return actualCoverage;}cov_2gvn0myxsl();const{User}=(cov_2gvn0myxsl().s[0]++,require('../models/User'));const fs=(cov_2gvn0myxsl().s[1]++,require('fs').promises);// async function readJSON(filename) {
//     try {
//         const data = await fs.readFile(filename, 'utf8');
//         return JSON.parse(data);
//     } catch (err) { console.error(err); throw err; }
// }
// async function writeJSON(object, filename) {
//     try {
//         const allObjects = await readJSON(filename);
//         allObjects.push(object);
//         await fs.writeFile(filename, JSON.stringify(allObjects), 'utf8');
//         return allObjects;
//     } catch (err) { console.error(err); throw err; }
// }
// async function login(req, res) {
//    try {
//         const email = req.body.email;
//         const password = req.body.password;
//         const allUsers = await readJSON('utils/users.json');
//         var validCredentials = false;
//         for (var i = 0; i < allUsers.length; i++) {
//             var currUser = allUsers[i];
//             if (currUser.email == email && currUser.password == password)
//             validCredentials = true;
//         } // if user type in correct email and password
//         if (validCredentials) {
//             return res.status(201).json({ message: 'Login successful!' });
//         } 
//         // if user only type in correct email 
//         if (currUser.email == email  )
//          {
//          return res.status(500).json({message: 'Invalid password!'})
//          } // if user only type in correct password 
//         if (currUser.password == password )
//          {
//           return res.status(500).json({message: 'Invalid email!'})
//         } //if user does not fill all input 
//       if (!email || !password) {
//           return res.status(400).json({ message: 'All input fields must be filled.' });
//          } // if user type in both wrong email and password
//        else {
//       return res.status(500).json({ message: 'Wrong Email and Password!' });
//       } 
//     } catch (error) {
//     return res.status(500).json({ message: error.message });
//     }
// }
// async function register(req, res) {
//     try {
//         const email = req.body.email;
//         const password = req.body.password;
//         const name = req.body.name;
//         const mobile = req.body.mobile;
//         // Checks if all fields are filled in 
//         if (!email || !password || !name || !mobile) {
//             return res.status(400).json({ message: 'All fields are required for registration.' });
//         }
//         // Checks if the email string does not include the '@'and '.com' substring
//         if (!email.includes('@') || !email.includes('.com')) {
//             return res.status(500).json({ message: 'Invalid email format.' });
//         }
//         // Checks if the length of the password string is less than 8 characters
//         if (password.length < 8) {
//             return res.status(500).json({ message: 'Password must be at least 8 characters long.' });
//         }
//         // Checks if the password string contains at least one uppercase letter 
//         if (!/(?=.*[A-Z])/.test(password)) {
//             return res.status(500).json({ message: 'Password must contain at least one uppercase letter.' });
//         }
//         // Checks if the password string contains one special character
//         if (!/(?=.*[!@#$%^&*])/.test(password)) {
//             return res.status(500).json({ message: 'Password must contain at least one special character.' });
//         }
//         // Checks if the name string contains only letters and is filled in
//         if (!/^[a-zA-Z]+$/.test(name) || name.length === 0) {
//             return res.status(500).json({ message: 'Invalid name format.' });
//         }        
//         // Checks if the mobile string contains exactly 8 digits
//         if (!mobile.trim() || !/^\d{8}$/.test(mobile)) {
//             return res.status(500).json({ message: 'Invalid mobile format.' });
//         }
//         const newUser = new User(email, password, name, mobile);
//         const updatedUsers = await writeJSON(newUser, 'utils/users.json');
//         return res.status(201).json(updatedUsers);
//     } catch (error) {
//     //     // Check if all required fields are filled in
//     //     if (!email || !password || !name || !mobile) {
//     //         return res.status(400).json({ message: 'All fields are required for registration.' });
//     //     }
//     //     if (!email.includes('@') || !email.includes('.com') || password.length < 8 ||!/(?=.*[A-Z])(?=.*[!@#$%^&*])/.test(password)
//     //     ||!/^[a-zA-Z]+$/.test(name) ||!mobile.trim()|| !/^\d{8}$/.test(mobile)) {
//     //         return res.status(500).json({ message: 'Validation error' });
//     //     } else {
//     //         const newUser = new User(email, password, name, mobile);
//     //         const updatedUsers = await writeJSON(newUser, 'utils/users.json');
//     //         return res.status(201).json(updatedUsers);
//     //     }
//     // } catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
// async function updateUser(req, res) {
//     try {
//     const id = req.params.id;
//     const password = req.body.password;
//     const mobile = req.body.mobile;
//     const allUsers = await readJSON('utils/users.json');
//         var edit = false;
//         for (var i = 0; i < allUsers.length; i++) {
//             var currUser = allUsers[i];
//             if (currUser.id == id){
//                 allUsers[i].password = password;
//                 allUsers[i].mobile = mobile;
//                 edit = true;
//             }   
//         }
//         //if password exceeds 8 digits
//         if ( password.length > 8){
//             return res.status(500).json({message: "Password should not have more than 8 digits!"});
//         }  //if password does not consist of uppercase  
//         if ( !/(?=.*[A-Za-z])(?=.*[!@#$%^&*])/.test(password)) {
//             return res.status(500).json({message: "Password should contain one upper case letter and special character and must not have numbers!"})
//         }   
//         // if mobile number consist of letter 
//         if ( !/^[0-9]/.test(mobile)) {
//            return res.status(500).json({message: "Mobile number should contain only numbers!"});
//         }
//         //if  mobile number exceeds 8 digits
//         if ( mobile.length > 8){
//             return res.status(500).json({message: "Mobile Number should not have more than 8 digits "});
//         }  
//          //if user does not fill all input 
//         if (!mobile || !password) {
//             return res.status(400).json({ message: 'All input fields must be filled!' });
//         }  //to update the password and mobile  
//         if (edit) {
//             await fs.writeFile('utils/users.json', JSON.stringify(allUsers), 'utf8');
//             return res.status(201).json({ message: 'User details has been successfully updated!' });
//        }
//         else {
//             return res.status(201).json({ message: 'User details is unsuccessful!' });
//         }
//     }
//     catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
async function deleteUser(req,res){cov_2gvn0myxsl().f[0]++;cov_2gvn0myxsl().s[2]++;try{const usernameToDelete=(cov_2gvn0myxsl().s[3]++,req.params.name);const enteredPassword=(cov_2gvn0myxsl().s[4]++,req.body.password);const allUsers=(cov_2gvn0myxsl().s[5]++,await readJSON('utils/users.json'));const userToDeleteIndex=(cov_2gvn0myxsl().s[6]++,allUsers.findIndex(user=>{cov_2gvn0myxsl().f[1]++;cov_2gvn0myxsl().s[7]++;return user.name===usernameToDelete;}));cov_2gvn0myxsl().s[8]++;if(userToDeleteIndex!==-1){cov_2gvn0myxsl().b[0][0]++;const userToDelete=(cov_2gvn0myxsl().s[9]++,allUsers[userToDeleteIndex]);// Check if the entered password matches the user's password
cov_2gvn0myxsl().s[10]++;if(enteredPassword===userToDelete.password){cov_2gvn0myxsl().b[1][0]++;cov_2gvn0myxsl().s[11]++;allUsers.splice(userToDeleteIndex,1);cov_2gvn0myxsl().s[12]++;await fs.writeFile('utils/users.json',JSON.stringify(allUsers),'utf8');cov_2gvn0myxsl().s[13]++;return res.status(200).json({message:`User '${usernameToDelete}' deleted successfully.`});}else{cov_2gvn0myxsl().b[1][1]++;cov_2gvn0myxsl().s[14]++;return res.status(401).json({message:'Incorrect password. Deletion failed.'});}}else{cov_2gvn0myxsl().b[0][1]++;cov_2gvn0myxsl().s[15]++;return res.status(404).json({message:`User '${usernameToDelete}' not found.`});}}catch(error){cov_2gvn0myxsl().s[16]++;return res.status(500).json({message:error.message});}}cov_2gvn0myxsl().s[17]++;module.exports={/*readJSON, writeJSON, login, register, updateUser,*/deleteUser};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmd2bjBteXhzbCIsImFjdHVhbENvdmVyYWdlIiwiVXNlciIsInMiLCJyZXF1aXJlIiwiZnMiLCJwcm9taXNlcyIsImRlbGV0ZVVzZXIiLCJyZXEiLCJyZXMiLCJmIiwidXNlcm5hbWVUb0RlbGV0ZSIsInBhcmFtcyIsIm5hbWUiLCJlbnRlcmVkUGFzc3dvcmQiLCJib2R5IiwicGFzc3dvcmQiLCJhbGxVc2VycyIsInJlYWRKU09OIiwidXNlclRvRGVsZXRlSW5kZXgiLCJmaW5kSW5kZXgiLCJ1c2VyIiwiYiIsInVzZXJUb0RlbGV0ZSIsInNwbGljZSIsIndyaXRlRmlsZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlVzZXJVdGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgVXNlciB9ID0gcmVxdWlyZSgnLi4vbW9kZWxzL1VzZXInKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpLnByb21pc2VzO1xyXG4vLyBhc3luYyBmdW5jdGlvbiByZWFkSlNPTihmaWxlbmFtZSkge1xyXG4vLyAgICAgdHJ5IHtcclxuLy8gICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZnMucmVhZEZpbGUoZmlsZW5hbWUsICd1dGY4Jyk7XHJcbi8vICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XHJcbi8vICAgICB9IGNhdGNoIChlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB0aHJvdyBlcnI7IH1cclxuLy8gfVxyXG5cclxuLy8gYXN5bmMgZnVuY3Rpb24gd3JpdGVKU09OKG9iamVjdCwgZmlsZW5hbWUpIHtcclxuLy8gICAgIHRyeSB7XHJcbi8vICAgICAgICAgY29uc3QgYWxsT2JqZWN0cyA9IGF3YWl0IHJlYWRKU09OKGZpbGVuYW1lKTtcclxuLy8gICAgICAgICBhbGxPYmplY3RzLnB1c2gob2JqZWN0KTtcclxuLy8gICAgICAgICBhd2FpdCBmcy53cml0ZUZpbGUoZmlsZW5hbWUsIEpTT04uc3RyaW5naWZ5KGFsbE9iamVjdHMpLCAndXRmOCcpO1xyXG4vLyAgICAgICAgIHJldHVybiBhbGxPYmplY3RzO1xyXG4vLyAgICAgfSBjYXRjaCAoZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgdGhyb3cgZXJyOyB9XHJcbi8vIH1cclxuXHJcblxyXG4vLyBhc3luYyBmdW5jdGlvbiBsb2dpbihyZXEsIHJlcykge1xyXG4vLyAgICB0cnkge1xyXG4vLyAgICAgICAgIGNvbnN0IGVtYWlsID0gcmVxLmJvZHkuZW1haWw7XHJcbi8vICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSByZXEuYm9keS5wYXNzd29yZDtcclxuXHJcbi8vICAgICAgICAgY29uc3QgYWxsVXNlcnMgPSBhd2FpdCByZWFkSlNPTigndXRpbHMvdXNlcnMuanNvbicpO1xyXG5cclxuLy8gICAgICAgICB2YXIgdmFsaWRDcmVkZW50aWFscyA9IGZhbHNlO1xyXG5cclxuLy8gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFVzZXJzLmxlbmd0aDsgaSsrKSB7XHJcbi8vICAgICAgICAgICAgIHZhciBjdXJyVXNlciA9IGFsbFVzZXJzW2ldO1xyXG4vLyAgICAgICAgICAgICBpZiAoY3VyclVzZXIuZW1haWwgPT0gZW1haWwgJiYgY3VyclVzZXIucGFzc3dvcmQgPT0gcGFzc3dvcmQpXHJcbi8vICAgICAgICAgICAgIHZhbGlkQ3JlZGVudGlhbHMgPSB0cnVlO1xyXG4vLyAgICAgICAgIH0gLy8gaWYgdXNlciB0eXBlIGluIGNvcnJlY3QgZW1haWwgYW5kIHBhc3N3b3JkXHJcbi8vICAgICAgICAgaWYgKHZhbGlkQ3JlZGVudGlhbHMpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAxKS5qc29uKHsgbWVzc2FnZTogJ0xvZ2luIHN1Y2Nlc3NmdWwhJyB9KTtcclxuLy8gICAgICAgICB9IFxyXG4vLyAgICAgICAgIC8vIGlmIHVzZXIgb25seSB0eXBlIGluIGNvcnJlY3QgZW1haWwgXHJcbi8vICAgICAgICAgaWYgKGN1cnJVc2VyLmVtYWlsID09IGVtYWlsICApXHJcbi8vICAgICAgICAgIHtcclxuLy8gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHttZXNzYWdlOiAnSW52YWxpZCBwYXNzd29yZCEnfSlcclxuLy8gICAgICAgICAgfSAvLyBpZiB1c2VyIG9ubHkgdHlwZSBpbiBjb3JyZWN0IHBhc3N3b3JkIFxyXG4vLyAgICAgICAgIGlmIChjdXJyVXNlci5wYXNzd29yZCA9PSBwYXNzd29yZCApXHJcbi8vICAgICAgICAgIHtcclxuLy8gICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7bWVzc2FnZTogJ0ludmFsaWQgZW1haWwhJ30pXHJcbi8vICAgICAgICAgfSAvL2lmIHVzZXIgZG9lcyBub3QgZmlsbCBhbGwgaW5wdXQgXHJcbi8vICAgICAgIGlmICghZW1haWwgfHwgIXBhc3N3b3JkKSB7XHJcbi8vICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnQWxsIGlucHV0IGZpZWxkcyBtdXN0IGJlIGZpbGxlZC4nIH0pO1xyXG4vLyAgICAgICAgICB9IC8vIGlmIHVzZXIgdHlwZSBpbiBib3RoIHdyb25nIGVtYWlsIGFuZCBwYXNzd29yZFxyXG4vLyAgICAgICAgZWxzZSB7XHJcbi8vICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdXcm9uZyBFbWFpbCBhbmQgUGFzc3dvcmQhJyB9KTtcclxuLy8gICAgICAgfSBcclxuLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbi8vICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG4vLyBhc3luYyBmdW5jdGlvbiByZWdpc3RlcihyZXEsIHJlcykge1xyXG4vLyAgICAgdHJ5IHtcclxuLy8gICAgICAgICBjb25zdCBlbWFpbCA9IHJlcS5ib2R5LmVtYWlsO1xyXG4vLyAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxLmJvZHkucGFzc3dvcmQ7XHJcbi8vICAgICAgICAgY29uc3QgbmFtZSA9IHJlcS5ib2R5Lm5hbWU7XHJcbi8vICAgICAgICAgY29uc3QgbW9iaWxlID0gcmVxLmJvZHkubW9iaWxlO1xyXG5cclxuXHJcbi8vICAgICAgICAgLy8gQ2hlY2tzIGlmIGFsbCBmaWVsZHMgYXJlIGZpbGxlZCBpbiBcclxuLy8gICAgICAgICBpZiAoIWVtYWlsIHx8ICFwYXNzd29yZCB8fCAhbmFtZSB8fCAhbW9iaWxlKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdBbGwgZmllbGRzIGFyZSByZXF1aXJlZCBmb3IgcmVnaXN0cmF0aW9uLicgfSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIC8vIENoZWNrcyBpZiB0aGUgZW1haWwgc3RyaW5nIGRvZXMgbm90IGluY2x1ZGUgdGhlICdAJ2FuZCAnLmNvbScgc3Vic3RyaW5nXHJcbi8vICAgICAgICAgaWYgKCFlbWFpbC5pbmNsdWRlcygnQCcpIHx8ICFlbWFpbC5pbmNsdWRlcygnLmNvbScpKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdJbnZhbGlkIGVtYWlsIGZvcm1hdC4nIH0pO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgLy8gQ2hlY2tzIGlmIHRoZSBsZW5ndGggb2YgdGhlIHBhc3N3b3JkIHN0cmluZyBpcyBsZXNzIHRoYW4gOCBjaGFyYWN0ZXJzXHJcbi8vICAgICAgICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IDgpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ1Bhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgOCBjaGFyYWN0ZXJzIGxvbmcuJyB9KTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIC8vIENoZWNrcyBpZiB0aGUgcGFzc3dvcmQgc3RyaW5nIGNvbnRhaW5zIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyIFxyXG4vLyAgICAgICAgIGlmICghLyg/PS4qW0EtWl0pLy50ZXN0KHBhc3N3b3JkKSkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyLicgfSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIC8vIENoZWNrcyBpZiB0aGUgcGFzc3dvcmQgc3RyaW5nIGNvbnRhaW5zIG9uZSBzcGVjaWFsIGNoYXJhY3RlclxyXG4vLyAgICAgICAgIGlmICghLyg/PS4qWyFAIyQlXiYqXSkvLnRlc3QocGFzc3dvcmQpKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyLicgfSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIC8vIENoZWNrcyBpZiB0aGUgbmFtZSBzdHJpbmcgY29udGFpbnMgb25seSBsZXR0ZXJzIGFuZCBpcyBmaWxsZWQgaW5cclxuLy8gICAgICAgICBpZiAoIS9eW2EtekEtWl0rJC8udGVzdChuYW1lKSB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCBuYW1lIGZvcm1hdC4nIH0pO1xyXG4vLyAgICAgICAgIH0gICAgICAgIFxyXG4vLyAgICAgICAgIC8vIENoZWNrcyBpZiB0aGUgbW9iaWxlIHN0cmluZyBjb250YWlucyBleGFjdGx5IDggZGlnaXRzXHJcbi8vICAgICAgICAgaWYgKCFtb2JpbGUudHJpbSgpIHx8ICEvXlxcZHs4fSQvLnRlc3QobW9iaWxlKSkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCBtb2JpbGUgZm9ybWF0LicgfSk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICBjb25zdCBuZXdVc2VyID0gbmV3IFVzZXIoZW1haWwsIHBhc3N3b3JkLCBuYW1lLCBtb2JpbGUpO1xyXG4vLyAgICAgICAgIGNvbnN0IHVwZGF0ZWRVc2VycyA9IGF3YWl0IHdyaXRlSlNPTihuZXdVc2VyLCAndXRpbHMvdXNlcnMuanNvbicpO1xyXG4vLyAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih1cGRhdGVkVXNlcnMpO1xyXG4vLyAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgXHJcbi8vICAgICAvLyAgICAgLy8gQ2hlY2sgaWYgYWxsIHJlcXVpcmVkIGZpZWxkcyBhcmUgZmlsbGVkIGluXHJcbi8vICAgICAvLyAgICAgaWYgKCFlbWFpbCB8fCAhcGFzc3dvcmQgfHwgIW5hbWUgfHwgIW1vYmlsZSkge1xyXG4vLyAgICAgLy8gICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnQWxsIGZpZWxkcyBhcmUgcmVxdWlyZWQgZm9yIHJlZ2lzdHJhdGlvbi4nIH0pO1xyXG4vLyAgICAgLy8gICAgIH1cclxuXHJcbi8vICAgICAvLyAgICAgaWYgKCFlbWFpbC5pbmNsdWRlcygnQCcpIHx8ICFlbWFpbC5pbmNsdWRlcygnLmNvbScpIHx8IHBhc3N3b3JkLmxlbmd0aCA8IDggfHwhLyg/PS4qW0EtWl0pKD89LipbIUAjJCVeJipdKS8udGVzdChwYXNzd29yZClcclxuLy8gICAgIC8vICAgICB8fCEvXlthLXpBLVpdKyQvLnRlc3QobmFtZSkgfHwhbW9iaWxlLnRyaW0oKXx8ICEvXlxcZHs4fSQvLnRlc3QobW9iaWxlKSkge1xyXG4vLyAgICAgLy8gICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnVmFsaWRhdGlvbiBlcnJvcicgfSk7XHJcbi8vICAgICAvLyAgICAgfSBlbHNlIHtcclxuLy8gICAgIC8vICAgICAgICAgY29uc3QgbmV3VXNlciA9IG5ldyBVc2VyKGVtYWlsLCBwYXNzd29yZCwgbmFtZSwgbW9iaWxlKTtcclxuLy8gICAgIC8vICAgICAgICAgY29uc3QgdXBkYXRlZFVzZXJzID0gYXdhaXQgd3JpdGVKU09OKG5ld1VzZXIsICd1dGlscy91c2Vycy5qc29uJyk7XHJcbi8vICAgICAvLyAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih1cGRhdGVkVXNlcnMpO1xyXG4vLyAgICAgLy8gICAgIH1cclxuLy8gICAgIC8vIH0gY2F0Y2ggKGVycm9yKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcclxuLy8gICAgIH1cclxuXHJcbi8vIH1cclxuXHJcbi8vIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVVzZXIocmVxLCByZXMpIHtcclxuLy8gICAgIHRyeSB7XHJcbi8vICAgICBjb25zdCBpZCA9IHJlcS5wYXJhbXMuaWQ7XHJcbi8vICAgICBjb25zdCBwYXNzd29yZCA9IHJlcS5ib2R5LnBhc3N3b3JkO1xyXG4vLyAgICAgY29uc3QgbW9iaWxlID0gcmVxLmJvZHkubW9iaWxlO1xyXG4gICAgXHJcblxyXG4vLyAgICAgY29uc3QgYWxsVXNlcnMgPSBhd2FpdCByZWFkSlNPTigndXRpbHMvdXNlcnMuanNvbicpO1xyXG5cclxuLy8gICAgICAgICB2YXIgZWRpdCA9IGZhbHNlO1xyXG5cclxuLy8gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFVzZXJzLmxlbmd0aDsgaSsrKSB7XHJcbi8vICAgICAgICAgICAgIHZhciBjdXJyVXNlciA9IGFsbFVzZXJzW2ldO1xyXG4vLyAgICAgICAgICAgICBpZiAoY3VyclVzZXIuaWQgPT0gaWQpe1xyXG4vLyAgICAgICAgICAgICAgICAgYWxsVXNlcnNbaV0ucGFzc3dvcmQgPSBwYXNzd29yZDtcclxuLy8gICAgICAgICAgICAgICAgIGFsbFVzZXJzW2ldLm1vYmlsZSA9IG1vYmlsZTtcclxuXHJcbi8vICAgICAgICAgICAgICAgICBlZGl0ID0gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgfSAgIFxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICAvL2lmIHBhc3N3b3JkIGV4Y2VlZHMgOCBkaWdpdHNcclxuLy8gICAgICAgICBpZiAoIHBhc3N3b3JkLmxlbmd0aCA+IDgpe1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe21lc3NhZ2U6IFwiUGFzc3dvcmQgc2hvdWxkIG5vdCBoYXZlIG1vcmUgdGhhbiA4IGRpZ2l0cyFcIn0pO1xyXG4vLyAgICAgICAgIH0gIC8vaWYgcGFzc3dvcmQgZG9lcyBub3QgY29uc2lzdCBvZiB1cHBlcmNhc2UgIFxyXG4vLyAgICAgICAgIGlmICggIS8oPz0uKltBLVphLXpdKSg/PS4qWyFAIyQlXiYqXSkvLnRlc3QocGFzc3dvcmQpKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7bWVzc2FnZTogXCJQYXNzd29yZCBzaG91bGQgY29udGFpbiBvbmUgdXBwZXIgY2FzZSBsZXR0ZXIgYW5kIHNwZWNpYWwgY2hhcmFjdGVyIGFuZCBtdXN0IG5vdCBoYXZlIG51bWJlcnMhXCJ9KVxyXG4vLyAgICAgICAgIH0gICBcclxuLy8gICAgICAgICAvLyBpZiBtb2JpbGUgbnVtYmVyIGNvbnNpc3Qgb2YgbGV0dGVyIFxyXG4vLyAgICAgICAgIGlmICggIS9eWzAtOV0vLnRlc3QobW9iaWxlKSkge1xyXG4vLyAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7bWVzc2FnZTogXCJNb2JpbGUgbnVtYmVyIHNob3VsZCBjb250YWluIG9ubHkgbnVtYmVycyFcIn0pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICAvL2lmICBtb2JpbGUgbnVtYmVyIGV4Y2VlZHMgOCBkaWdpdHNcclxuLy8gICAgICAgICBpZiAoIG1vYmlsZS5sZW5ndGggPiA4KXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHttZXNzYWdlOiBcIk1vYmlsZSBOdW1iZXIgc2hvdWxkIG5vdCBoYXZlIG1vcmUgdGhhbiA4IGRpZ2l0cyBcIn0pO1xyXG4vLyAgICAgICAgIH0gIFxyXG4vLyAgICAgICAgICAvL2lmIHVzZXIgZG9lcyBub3QgZmlsbCBhbGwgaW5wdXQgXHJcbi8vICAgICAgICAgaWYgKCFtb2JpbGUgfHwgIXBhc3N3b3JkKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdBbGwgaW5wdXQgZmllbGRzIG11c3QgYmUgZmlsbGVkIScgfSk7XHJcbi8vICAgICAgICAgfSAgLy90byB1cGRhdGUgdGhlIHBhc3N3b3JkIGFuZCBtb2JpbGUgIFxyXG4vLyAgICAgICAgIGlmIChlZGl0KSB7XHJcbi8vICAgICAgICAgICAgIGF3YWl0IGZzLndyaXRlRmlsZSgndXRpbHMvdXNlcnMuanNvbicsIEpTT04uc3RyaW5naWZ5KGFsbFVzZXJzKSwgJ3V0ZjgnKTtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAxKS5qc29uKHsgbWVzc2FnZTogJ1VzZXIgZGV0YWlscyBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgdXBkYXRlZCEnIH0pO1xyXG4vLyAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyBtZXNzYWdlOiAnVXNlciBkZXRhaWxzIGlzIHVuc3VjY2Vzc2Z1bCEnIH0pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuICAgIFxyXG4vLyAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuICAgIFxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlVXNlcihyZXEsIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB1c2VybmFtZVRvRGVsZXRlID0gcmVxLnBhcmFtcy5uYW1lO1xyXG4gICAgICAgIGNvbnN0IGVudGVyZWRQYXNzd29yZCA9IHJlcS5ib2R5LnBhc3N3b3JkO1xyXG5cclxuICAgICAgICBjb25zdCBhbGxVc2VycyA9IGF3YWl0IHJlYWRKU09OKCd1dGlscy91c2Vycy5qc29uJyk7XHJcbiAgICAgICAgY29uc3QgdXNlclRvRGVsZXRlSW5kZXggPSBhbGxVc2Vycy5maW5kSW5kZXgodXNlciA9PiB1c2VyLm5hbWUgPT09IHVzZXJuYW1lVG9EZWxldGUpO1xyXG5cclxuICAgICAgICBpZiAodXNlclRvRGVsZXRlSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJUb0RlbGV0ZSA9IGFsbFVzZXJzW3VzZXJUb0RlbGV0ZUluZGV4XTtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBlbnRlcmVkIHBhc3N3b3JkIG1hdGNoZXMgdGhlIHVzZXIncyBwYXNzd29yZFxyXG4gICAgICAgICAgICBpZiAoZW50ZXJlZFBhc3N3b3JkID09PSB1c2VyVG9EZWxldGUucGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgICAgIGFsbFVzZXJzLnNwbGljZSh1c2VyVG9EZWxldGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBmcy53cml0ZUZpbGUoJ3V0aWxzL3VzZXJzLmpzb24nLCBKU09OLnN0cmluZ2lmeShhbGxVc2VycyksICd1dGY4Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBtZXNzYWdlOiBgVXNlciAnJHt1c2VybmFtZVRvRGVsZXRlfScgZGVsZXRlZCBzdWNjZXNzZnVsbHkuYCB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IG1lc3NhZ2U6ICdJbmNvcnJlY3QgcGFzc3dvcmQuIERlbGV0aW9uIGZhaWxlZC4nIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogYFVzZXIgJyR7dXNlcm5hbWVUb0RlbGV0ZX0nIG5vdCBmb3VuZC5gIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIC8qcmVhZEpTT04sIHdyaXRlSlNPTiwgbG9naW4sIHJlZ2lzdGVyLCB1cGRhdGVVc2VyLCovIGRlbGV0ZVVzZXJcclxufTtcclxuICAgIFxyXG4iXSwibWFwcGluZ3MiOiI4K0VBZVk7QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxjQUFBLEdBZlosS0FBTSxDQUFFRSxJQUFLLENBQUMsRUFBQUYsY0FBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUMxQyxLQUFNLENBQUFDLEVBQUUsRUFBQUwsY0FBQSxHQUFBRyxDQUFBLE1BQUdDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQ0UsUUFBUSxFQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFJQSxjQUFlLENBQUFDLFVBQVVBLENBQUNDLEdBQUcsQ0FBRUMsR0FBRyxDQUFFLENBQUFULGNBQUEsR0FBQVUsQ0FBQSxNQUFBVixjQUFBLEdBQUFHLENBQUEsTUFDaEMsR0FBSSxDQUNBLEtBQU0sQ0FBQVEsZ0JBQWdCLEVBQUFYLGNBQUEsR0FBQUcsQ0FBQSxNQUFHSyxHQUFHLENBQUNJLE1BQU0sQ0FBQ0MsSUFBSSxFQUN4QyxLQUFNLENBQUFDLGVBQWUsRUFBQWQsY0FBQSxHQUFBRyxDQUFBLE1BQUdLLEdBQUcsQ0FBQ08sSUFBSSxDQUFDQyxRQUFRLEVBRXpDLEtBQU0sQ0FBQUMsUUFBUSxFQUFBakIsY0FBQSxHQUFBRyxDQUFBLE1BQUcsS0FBTSxDQUFBZSxRQUFRLENBQUMsa0JBQWtCLENBQUMsRUFDbkQsS0FBTSxDQUFBQyxpQkFBaUIsRUFBQW5CLGNBQUEsR0FBQUcsQ0FBQSxNQUFHYyxRQUFRLENBQUNHLFNBQVMsQ0FBQ0MsSUFBSSxFQUFJLENBQUFyQixjQUFBLEdBQUFVLENBQUEsTUFBQVYsY0FBQSxHQUFBRyxDQUFBLGFBQUFrQixJQUFJLENBQUNSLElBQUksR0FBS0YsZ0JBQWdCLENBQUQsQ0FBQyxDQUFDLEVBQUNYLGNBQUEsR0FBQUcsQ0FBQSxNQUVyRixHQUFJZ0IsaUJBQWlCLEdBQUssQ0FBQyxDQUFDLENBQUUsQ0FBQW5CLGNBQUEsR0FBQXNCLENBQUEsU0FDMUIsS0FBTSxDQUFBQyxZQUFZLEVBQUF2QixjQUFBLEdBQUFHLENBQUEsTUFBR2MsUUFBUSxDQUFDRSxpQkFBaUIsQ0FBQyxFQUVoRDtBQUFBbkIsY0FBQSxHQUFBRyxDQUFBLE9BQ0EsR0FBSVcsZUFBZSxHQUFLUyxZQUFZLENBQUNQLFFBQVEsQ0FBRSxDQUFBaEIsY0FBQSxHQUFBc0IsQ0FBQSxTQUFBdEIsY0FBQSxHQUFBRyxDQUFBLE9BQzNDYyxRQUFRLENBQUNPLE1BQU0sQ0FBQ0wsaUJBQWlCLENBQUUsQ0FBQyxDQUFDLENBQUNuQixjQUFBLEdBQUFHLENBQUEsT0FDdEMsS0FBTSxDQUFBRSxFQUFFLENBQUNvQixTQUFTLENBQUMsa0JBQWtCLENBQUVDLElBQUksQ0FBQ0MsU0FBUyxDQUFDVixRQUFRLENBQUMsQ0FBRSxNQUFNLENBQUMsQ0FBQ2pCLGNBQUEsR0FBQUcsQ0FBQSxPQUN6RSxNQUFPLENBQUFNLEdBQUcsQ0FBQ21CLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUVDLE9BQU8sQ0FBRyxTQUFRbkIsZ0JBQWlCLHlCQUF5QixDQUFDLENBQUMsQ0FDaEcsQ0FBQyxJQUFNLENBQUFYLGNBQUEsR0FBQXNCLENBQUEsU0FBQXRCLGNBQUEsR0FBQUcsQ0FBQSxPQUNILE1BQU8sQ0FBQU0sR0FBRyxDQUFDbUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBRUMsT0FBTyxDQUFFLHNDQUF1QyxDQUFDLENBQUMsQ0FDcEYsQ0FDSixDQUFDLElBQU0sQ0FBQTlCLGNBQUEsR0FBQXNCLENBQUEsU0FBQXRCLGNBQUEsR0FBQUcsQ0FBQSxPQUNILE1BQU8sQ0FBQU0sR0FBRyxDQUFDbUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBRUMsT0FBTyxDQUFHLFNBQVFuQixnQkFBaUIsY0FBYyxDQUFDLENBQUMsQ0FDckYsQ0FDSixDQUFFLE1BQU9vQixLQUFLLENBQUUsQ0FBQS9CLGNBQUEsR0FBQUcsQ0FBQSxPQUNaLE1BQU8sQ0FBQU0sR0FBRyxDQUFDbUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBRUMsT0FBTyxDQUFFQyxLQUFLLENBQUNELE9BQVEsQ0FBQyxDQUFDLENBQzNELENBQ0osQ0FBQzlCLGNBQUEsR0FBQUcsQ0FBQSxPQUlENkIsTUFBTSxDQUFDQyxPQUFPLENBQUcsQ0FDYixxREFBc0QxQixVQUMxRCxDQUFDIn0=