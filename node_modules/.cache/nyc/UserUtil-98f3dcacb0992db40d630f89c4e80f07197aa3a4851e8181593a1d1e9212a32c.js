function cov_2gvn0myxsl(){var path="C:\\Users\\annsj\\Documents\\DVOPS_Projects\\Final\\JobFinders\\utils\\UserUtil.js";var hash="2cd031ead682f269b4b75ff7277eee2409738ab5";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\annsj\\Documents\\DVOPS_Projects\\Final\\JobFinders\\utils\\UserUtil.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:42}},"1":{start:{line:2,column:11},end:{line:2,column:33}},"2":{start:{line:4,column:4},end:{line:7,column:52}},"3":{start:{line:5,column:21},end:{line:5,column:56}},"4":{start:{line:6,column:8},end:{line:6,column:32}},"5":{start:{line:7,column:20},end:{line:7,column:39}},"6":{start:{line:7,column:40},end:{line:7,column:50}},"7":{start:{line:11,column:4},end:{line:16,column:52}},"8":{start:{line:12,column:27},end:{line:12,column:51}},"9":{start:{line:13,column:8},end:{line:13,column:32}},"10":{start:{line:14,column:8},end:{line:14,column:73}},"11":{start:{line:15,column:8},end:{line:15,column:26}},"12":{start:{line:16,column:20},end:{line:16,column:39}},"13":{start:{line:16,column:40},end:{line:16,column:50}},"14":{start:{line:176,column:4},end:{line:199,column:5}},"15":{start:{line:177,column:33},end:{line:177,column:48}},"16":{start:{line:178,column:32},end:{line:178,column:49}},"17":{start:{line:180,column:25},end:{line:180,column:59}},"18":{start:{line:181,column:34},end:{line:181,column:92}},"19":{start:{line:181,column:61},end:{line:181,column:91}},"20":{start:{line:183,column:8},end:{line:196,column:9}},"21":{start:{line:184,column:33},end:{line:184,column:60}},"22":{start:{line:187,column:12},end:{line:193,column:13}},"23":{start:{line:188,column:16},end:{line:188,column:54}},"24":{start:{line:189,column:16},end:{line:189,column:89}},"25":{start:{line:190,column:16},end:{line:190,column:109}},"26":{start:{line:192,column:16},end:{line:192,column:97}},"27":{start:{line:195,column:12},end:{line:195,column:94}},"28":{start:{line:198,column:8},end:{line:198,column:64}},"29":{start:{line:204,column:0},end:{line:206,column:2}}},fnMap:{"0":{name:"readJSON",decl:{start:{line:3,column:15},end:{line:3,column:23}},loc:{start:{line:3,column:34},end:{line:8,column:1}},line:3},"1":{name:"writeJSON",decl:{start:{line:10,column:15},end:{line:10,column:24}},loc:{start:{line:10,column:43},end:{line:17,column:1}},line:10},"2":{name:"deleteUser",decl:{start:{line:175,column:15},end:{line:175,column:25}},loc:{start:{line:175,column:36},end:{line:200,column:1}},line:175},"3":{name:"(anonymous_3)",decl:{start:{line:181,column:53},end:{line:181,column:54}},loc:{start:{line:181,column:61},end:{line:181,column:91}},line:181}},branchMap:{"0":{loc:{start:{line:183,column:8},end:{line:196,column:9}},type:"if",locations:[{start:{line:183,column:8},end:{line:196,column:9}},{start:{line:183,column:8},end:{line:196,column:9}}],line:183},"1":{loc:{start:{line:187,column:12},end:{line:193,column:13}},type:"if",locations:[{start:{line:187,column:12},end:{line:193,column:13}},{start:{line:187,column:12},end:{line:193,column:13}}],line:187}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2cd031ead682f269b4b75ff7277eee2409738ab5"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2gvn0myxsl=function(){return actualCoverage;};}return actualCoverage;}cov_2gvn0myxsl();const{User}=(cov_2gvn0myxsl().s[0]++,require('../models/User'));const fs=(cov_2gvn0myxsl().s[1]++,require('fs').promises);async function readJSON(filename){cov_2gvn0myxsl().f[0]++;cov_2gvn0myxsl().s[2]++;try{const data=(cov_2gvn0myxsl().s[3]++,await fs.readFile(filename,'utf8'));cov_2gvn0myxsl().s[4]++;return JSON.parse(data);}catch(err){cov_2gvn0myxsl().s[5]++;console.error(err);cov_2gvn0myxsl().s[6]++;throw err;}}async function writeJSON(object,filename){cov_2gvn0myxsl().f[1]++;cov_2gvn0myxsl().s[7]++;try{const allObjects=(cov_2gvn0myxsl().s[8]++,await readJSON(filename));cov_2gvn0myxsl().s[9]++;allObjects.push(object);cov_2gvn0myxsl().s[10]++;await fs.writeFile(filename,JSON.stringify(allObjects),'utf8');cov_2gvn0myxsl().s[11]++;return allObjects;}catch(err){cov_2gvn0myxsl().s[12]++;console.error(err);cov_2gvn0myxsl().s[13]++;throw err;}}// async function login(req, res) {
//    try {
//         const email = req.body.email;
//         const password = req.body.password;
//         const allUsers = await readJSON('utils/users.json');
//         var validCredentials = false;
//         for (var i = 0; i < allUsers.length; i++) {
//             var currUser = allUsers[i];
//             if (currUser.email == email && currUser.password == password)
//             validCredentials = true;
//         } // if user type in correct email and password
//         if (validCredentials) {
//             return res.status(201).json({ message: 'Login successful!' });
//         } 
//         // if user only type in correct email 
//         if (currUser.email == email  )
//          {
//          return res.status(500).json({message: 'Invalid password!'})
//          } // if user only type in correct password 
//         if (currUser.password == password )
//          {
//           return res.status(500).json({message: 'Invalid email!'})
//         } //if user does not fill all input 
//       if (!email || !password) {
//           return res.status(400).json({ message: 'All input fields must be filled.' });
//          } // if user type in both wrong email and password
//        else {
//       return res.status(500).json({ message: 'Wrong Email and Password!' });
//       } 
//     } catch (error) {
//     return res.status(500).json({ message: error.message });
//     }
// }
// async function register(req, res) {
//     try {
//         const email = req.body.email;
//         const password = req.body.password;
//         const name = req.body.name;
//         const mobile = req.body.mobile;
//         // Checks if all fields are filled in 
//         if (!email || !password || !name || !mobile) {
//             return res.status(400).json({ message: 'All fields are required for registration.' });
//         }
//         // Checks if the email string does not include the '@'and '.com' substring
//         if (!email.includes('@') || !email.includes('.com')) {
//             return res.status(500).json({ message: 'Invalid email format.' });
//         }
//         // Checks if the length of the password string is less than 8 characters
//         if (password.length < 8) {
//             return res.status(500).json({ message: 'Password must be at least 8 characters long.' });
//         }
//         // Checks if the password string contains at least one uppercase letter 
//         if (!/(?=.*[A-Z])/.test(password)) {
//             return res.status(500).json({ message: 'Password must contain at least one uppercase letter.' });
//         }
//         // Checks if the password string contains one special character
//         if (!/(?=.*[!@#$%^&*])/.test(password)) {
//             return res.status(500).json({ message: 'Password must contain at least one special character.' });
//         }
//         // Checks if the name string contains only letters and is filled in
//         if (!/^[a-zA-Z]+$/.test(name) || name.length === 0) {
//             return res.status(500).json({ message: 'Invalid name format.' });
//         }        
//         // Checks if the mobile string contains exactly 8 digits
//         if (!mobile.trim() || !/^\d{8}$/.test(mobile)) {
//             return res.status(500).json({ message: 'Invalid mobile format.' });
//         }
//         const newUser = new User(email, password, name, mobile);
//         const updatedUsers = await writeJSON(newUser, 'utils/users.json');
//         return res.status(201).json(updatedUsers);
//     } catch (error) {
//     //     // Check if all required fields are filled in
//     //     if (!email || !password || !name || !mobile) {
//     //         return res.status(400).json({ message: 'All fields are required for registration.' });
//     //     }
//     //     if (!email.includes('@') || !email.includes('.com') || password.length < 8 ||!/(?=.*[A-Z])(?=.*[!@#$%^&*])/.test(password)
//     //     ||!/^[a-zA-Z]+$/.test(name) ||!mobile.trim()|| !/^\d{8}$/.test(mobile)) {
//     //         return res.status(500).json({ message: 'Validation error' });
//     //     } else {
//     //         const newUser = new User(email, password, name, mobile);
//     //         const updatedUsers = await writeJSON(newUser, 'utils/users.json');
//     //         return res.status(201).json(updatedUsers);
//     //     }
//     // } catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
// async function updateUser(req, res) {
//     try {
//     const id = req.params.id;
//     const password = req.body.password;
//     const mobile = req.body.mobile;
//     const allUsers = await readJSON('utils/users.json');
//         var edit = false;
//         for (var i = 0; i < allUsers.length; i++) {
//             var currUser = allUsers[i];
//             if (currUser.id == id){
//                 allUsers[i].password = password;
//                 allUsers[i].mobile = mobile;
//                 edit = true;
//             }   
//         }
//         //if password exceeds 8 digits
//         if ( password.length > 8){
//             return res.status(500).json({message: "Password should not have more than 8 digits!"});
//         }  //if password does not consist of uppercase  
//         if ( !/(?=.*[A-Za-z])(?=.*[!@#$%^&*])/.test(password)) {
//             return res.status(500).json({message: "Password should contain one upper case letter and special character and must not have numbers!"})
//         }   
//         // if mobile number consist of letter 
//         if ( !/^[0-9]/.test(mobile)) {
//            return res.status(500).json({message: "Mobile number should contain only numbers!"});
//         }
//         //if  mobile number exceeds 8 digits
//         if ( mobile.length > 8){
//             return res.status(500).json({message: "Mobile Number should not have more than 8 digits "});
//         }  
//          //if user does not fill all input 
//         if (!mobile || !password) {
//             return res.status(400).json({ message: 'All input fields must be filled!' });
//         }  //to update the password and mobile  
//         if (edit) {
//             await fs.writeFile('utils/users.json', JSON.stringify(allUsers), 'utf8');
//             return res.status(201).json({ message: 'User details has been successfully updated!' });
//        }
//         else {
//             return res.status(201).json({ message: 'User details is unsuccessful!' });
//         }
//     }
//     catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
async function deleteUser(req,res){cov_2gvn0myxsl().f[2]++;cov_2gvn0myxsl().s[14]++;try{const usernameToDelete=(cov_2gvn0myxsl().s[15]++,req.params.name);const enteredPassword=(cov_2gvn0myxsl().s[16]++,req.body.password);const allUsers=(cov_2gvn0myxsl().s[17]++,await readJSON('utils/users.json'));const userToDeleteIndex=(cov_2gvn0myxsl().s[18]++,allUsers.findIndex(user=>{cov_2gvn0myxsl().f[3]++;cov_2gvn0myxsl().s[19]++;return user.name===usernameToDelete;}));cov_2gvn0myxsl().s[20]++;if(userToDeleteIndex!==-1){cov_2gvn0myxsl().b[0][0]++;const userToDelete=(cov_2gvn0myxsl().s[21]++,allUsers[userToDeleteIndex]);// Check if the entered password matches the user's password
cov_2gvn0myxsl().s[22]++;if(enteredPassword===userToDelete.password){cov_2gvn0myxsl().b[1][0]++;cov_2gvn0myxsl().s[23]++;allUsers.splice(userToDeleteIndex,1);cov_2gvn0myxsl().s[24]++;await fs.writeFile('utils/users.json',JSON.stringify(allUsers),'utf8');cov_2gvn0myxsl().s[25]++;return res.status(200).json({message:`User '${usernameToDelete}' deleted successfully.`});}else{cov_2gvn0myxsl().b[1][1]++;cov_2gvn0myxsl().s[26]++;return res.status(401).json({message:'Incorrect password. Deletion failed.'});}}else{cov_2gvn0myxsl().b[0][1]++;cov_2gvn0myxsl().s[27]++;return res.status(404).json({message:`User '${usernameToDelete}' not found.`});}}catch(error){cov_2gvn0myxsl().s[28]++;return res.status(500).json({message:error.message});}}cov_2gvn0myxsl().s[29]++;module.exports={readJSON,writeJSON,/*login, register, updateUser,*/deleteUser};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmd2bjBteXhzbCIsImFjdHVhbENvdmVyYWdlIiwiVXNlciIsInMiLCJyZXF1aXJlIiwiZnMiLCJwcm9taXNlcyIsInJlYWRKU09OIiwiZmlsZW5hbWUiLCJmIiwiZGF0YSIsInJlYWRGaWxlIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwid3JpdGVKU09OIiwib2JqZWN0IiwiYWxsT2JqZWN0cyIsInB1c2giLCJ3cml0ZUZpbGUiLCJzdHJpbmdpZnkiLCJkZWxldGVVc2VyIiwicmVxIiwicmVzIiwidXNlcm5hbWVUb0RlbGV0ZSIsInBhcmFtcyIsIm5hbWUiLCJlbnRlcmVkUGFzc3dvcmQiLCJib2R5IiwicGFzc3dvcmQiLCJhbGxVc2VycyIsInVzZXJUb0RlbGV0ZUluZGV4IiwiZmluZEluZGV4IiwidXNlciIsImIiLCJ1c2VyVG9EZWxldGUiLCJzcGxpY2UiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJVc2VyVXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IFVzZXIgfSA9IHJlcXVpcmUoJy4uL21vZGVscy9Vc2VyJyk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKS5wcm9taXNlcztcclxuYXN5bmMgZnVuY3Rpb24gcmVhZEpTT04oZmlsZW5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZzLnJlYWRGaWxlKGZpbGVuYW1lLCAndXRmOCcpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgdGhyb3cgZXJyOyB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHdyaXRlSlNPTihvYmplY3QsIGZpbGVuYW1lKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGFsbE9iamVjdHMgPSBhd2FpdCByZWFkSlNPTihmaWxlbmFtZSk7XHJcbiAgICAgICAgYWxsT2JqZWN0cy5wdXNoKG9iamVjdCk7XHJcbiAgICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKGZpbGVuYW1lLCBKU09OLnN0cmluZ2lmeShhbGxPYmplY3RzKSwgJ3V0ZjgnKTtcclxuICAgICAgICByZXR1cm4gYWxsT2JqZWN0cztcclxuICAgIH0gY2F0Y2ggKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IHRocm93IGVycjsgfVxyXG59XHJcblxyXG5cclxuLy8gYXN5bmMgZnVuY3Rpb24gbG9naW4ocmVxLCByZXMpIHtcclxuLy8gICAgdHJ5IHtcclxuLy8gICAgICAgICBjb25zdCBlbWFpbCA9IHJlcS5ib2R5LmVtYWlsO1xyXG4vLyAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxLmJvZHkucGFzc3dvcmQ7XHJcblxyXG4vLyAgICAgICAgIGNvbnN0IGFsbFVzZXJzID0gYXdhaXQgcmVhZEpTT04oJ3V0aWxzL3VzZXJzLmpzb24nKTtcclxuXHJcbi8vICAgICAgICAgdmFyIHZhbGlkQ3JlZGVudGlhbHMgPSBmYWxzZTtcclxuXHJcbi8vICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxVc2Vycy5sZW5ndGg7IGkrKykge1xyXG4vLyAgICAgICAgICAgICB2YXIgY3VyclVzZXIgPSBhbGxVc2Vyc1tpXTtcclxuLy8gICAgICAgICAgICAgaWYgKGN1cnJVc2VyLmVtYWlsID09IGVtYWlsICYmIGN1cnJVc2VyLnBhc3N3b3JkID09IHBhc3N3b3JkKVxyXG4vLyAgICAgICAgICAgICB2YWxpZENyZWRlbnRpYWxzID0gdHJ1ZTtcclxuLy8gICAgICAgICB9IC8vIGlmIHVzZXIgdHlwZSBpbiBjb3JyZWN0IGVtYWlsIGFuZCBwYXNzd29yZFxyXG4vLyAgICAgICAgIGlmICh2YWxpZENyZWRlbnRpYWxzKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7IG1lc3NhZ2U6ICdMb2dpbiBzdWNjZXNzZnVsIScgfSk7XHJcbi8vICAgICAgICAgfSBcclxuLy8gICAgICAgICAvLyBpZiB1c2VyIG9ubHkgdHlwZSBpbiBjb3JyZWN0IGVtYWlsIFxyXG4vLyAgICAgICAgIGlmIChjdXJyVXNlci5lbWFpbCA9PSBlbWFpbCAgKVxyXG4vLyAgICAgICAgICB7XHJcbi8vICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7bWVzc2FnZTogJ0ludmFsaWQgcGFzc3dvcmQhJ30pXHJcbi8vICAgICAgICAgIH0gLy8gaWYgdXNlciBvbmx5IHR5cGUgaW4gY29ycmVjdCBwYXNzd29yZCBcclxuLy8gICAgICAgICBpZiAoY3VyclVzZXIucGFzc3dvcmQgPT0gcGFzc3dvcmQgKVxyXG4vLyAgICAgICAgICB7XHJcbi8vICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe21lc3NhZ2U6ICdJbnZhbGlkIGVtYWlsISd9KVxyXG4vLyAgICAgICAgIH0gLy9pZiB1c2VyIGRvZXMgbm90IGZpbGwgYWxsIGlucHV0IFxyXG4vLyAgICAgICBpZiAoIWVtYWlsIHx8ICFwYXNzd29yZCkge1xyXG4vLyAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0FsbCBpbnB1dCBmaWVsZHMgbXVzdCBiZSBmaWxsZWQuJyB9KTtcclxuLy8gICAgICAgICAgfSAvLyBpZiB1c2VyIHR5cGUgaW4gYm90aCB3cm9uZyBlbWFpbCBhbmQgcGFzc3dvcmRcclxuLy8gICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnV3JvbmcgRW1haWwgYW5kIFBhc3N3b3JkIScgfSk7XHJcbi8vICAgICAgIH0gXHJcbi8vICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4vLyAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuLy8gYXN5bmMgZnVuY3Rpb24gcmVnaXN0ZXIocmVxLCByZXMpIHtcclxuLy8gICAgIHRyeSB7XHJcbi8vICAgICAgICAgY29uc3QgZW1haWwgPSByZXEuYm9keS5lbWFpbDtcclxuLy8gICAgICAgICBjb25zdCBwYXNzd29yZCA9IHJlcS5ib2R5LnBhc3N3b3JkO1xyXG4vLyAgICAgICAgIGNvbnN0IG5hbWUgPSByZXEuYm9keS5uYW1lO1xyXG4vLyAgICAgICAgIGNvbnN0IG1vYmlsZSA9IHJlcS5ib2R5Lm1vYmlsZTtcclxuXHJcblxyXG4vLyAgICAgICAgIC8vIENoZWNrcyBpZiBhbGwgZmllbGRzIGFyZSBmaWxsZWQgaW4gXHJcbi8vICAgICAgICAgaWYgKCFlbWFpbCB8fCAhcGFzc3dvcmQgfHwgIW5hbWUgfHwgIW1vYmlsZSkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnQWxsIGZpZWxkcyBhcmUgcmVxdWlyZWQgZm9yIHJlZ2lzdHJhdGlvbi4nIH0pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICAvLyBDaGVja3MgaWYgdGhlIGVtYWlsIHN0cmluZyBkb2VzIG5vdCBpbmNsdWRlIHRoZSAnQCdhbmQgJy5jb20nIHN1YnN0cmluZ1xyXG4vLyAgICAgICAgIGlmICghZW1haWwuaW5jbHVkZXMoJ0AnKSB8fCAhZW1haWwuaW5jbHVkZXMoJy5jb20nKSkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCBlbWFpbCBmb3JtYXQuJyB9KTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIC8vIENoZWNrcyBpZiB0aGUgbGVuZ3RoIG9mIHRoZSBwYXNzd29yZCBzdHJpbmcgaXMgbGVzcyB0aGFuIDggY2hhcmFjdGVyc1xyXG4vLyAgICAgICAgIGlmIChwYXNzd29yZC5sZW5ndGggPCA4KSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDggY2hhcmFjdGVycyBsb25nLicgfSk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAvLyBDaGVja3MgaWYgdGhlIHBhc3N3b3JkIHN0cmluZyBjb250YWlucyBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGxldHRlciBcclxuLy8gICAgICAgICBpZiAoIS8oPz0uKltBLVpdKS8udGVzdChwYXNzd29yZCkpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ1Bhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGxldHRlci4nIH0pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICAvLyBDaGVja3MgaWYgdGhlIHBhc3N3b3JkIHN0cmluZyBjb250YWlucyBvbmUgc3BlY2lhbCBjaGFyYWN0ZXJcclxuLy8gICAgICAgICBpZiAoIS8oPz0uKlshQCMkJV4mKl0pLy50ZXN0KHBhc3N3b3JkKSkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3Rlci4nIH0pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICAvLyBDaGVja3MgaWYgdGhlIG5hbWUgc3RyaW5nIGNvbnRhaW5zIG9ubHkgbGV0dGVycyBhbmQgaXMgZmlsbGVkIGluXHJcbi8vICAgICAgICAgaWYgKCEvXlthLXpBLVpdKyQvLnRlc3QobmFtZSkgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ludmFsaWQgbmFtZSBmb3JtYXQuJyB9KTtcclxuLy8gICAgICAgICB9ICAgICAgICBcclxuLy8gICAgICAgICAvLyBDaGVja3MgaWYgdGhlIG1vYmlsZSBzdHJpbmcgY29udGFpbnMgZXhhY3RseSA4IGRpZ2l0c1xyXG4vLyAgICAgICAgIGlmICghbW9iaWxlLnRyaW0oKSB8fCAhL15cXGR7OH0kLy50ZXN0KG1vYmlsZSkpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ludmFsaWQgbW9iaWxlIGZvcm1hdC4nIH0pO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgY29uc3QgbmV3VXNlciA9IG5ldyBVc2VyKGVtYWlsLCBwYXNzd29yZCwgbmFtZSwgbW9iaWxlKTtcclxuLy8gICAgICAgICBjb25zdCB1cGRhdGVkVXNlcnMgPSBhd2FpdCB3cml0ZUpTT04obmV3VXNlciwgJ3V0aWxzL3VzZXJzLmpzb24nKTtcclxuLy8gICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24odXBkYXRlZFVzZXJzKTtcclxuLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIFxyXG4vLyAgICAgLy8gICAgIC8vIENoZWNrIGlmIGFsbCByZXF1aXJlZCBmaWVsZHMgYXJlIGZpbGxlZCBpblxyXG4vLyAgICAgLy8gICAgIGlmICghZW1haWwgfHwgIXBhc3N3b3JkIHx8ICFuYW1lIHx8ICFtb2JpbGUpIHtcclxuLy8gICAgIC8vICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0FsbCBmaWVsZHMgYXJlIHJlcXVpcmVkIGZvciByZWdpc3RyYXRpb24uJyB9KTtcclxuLy8gICAgIC8vICAgICB9XHJcblxyXG4vLyAgICAgLy8gICAgIGlmICghZW1haWwuaW5jbHVkZXMoJ0AnKSB8fCAhZW1haWwuaW5jbHVkZXMoJy5jb20nKSB8fCBwYXNzd29yZC5sZW5ndGggPCA4IHx8IS8oPz0uKltBLVpdKSg/PS4qWyFAIyQlXiYqXSkvLnRlc3QocGFzc3dvcmQpXHJcbi8vICAgICAvLyAgICAgfHwhL15bYS16QS1aXSskLy50ZXN0KG5hbWUpIHx8IW1vYmlsZS50cmltKCl8fCAhL15cXGR7OH0kLy50ZXN0KG1vYmlsZSkpIHtcclxuLy8gICAgIC8vICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ1ZhbGlkYXRpb24gZXJyb3InIH0pO1xyXG4vLyAgICAgLy8gICAgIH0gZWxzZSB7XHJcbi8vICAgICAvLyAgICAgICAgIGNvbnN0IG5ld1VzZXIgPSBuZXcgVXNlcihlbWFpbCwgcGFzc3dvcmQsIG5hbWUsIG1vYmlsZSk7XHJcbi8vICAgICAvLyAgICAgICAgIGNvbnN0IHVwZGF0ZWRVc2VycyA9IGF3YWl0IHdyaXRlSlNPTihuZXdVc2VyLCAndXRpbHMvdXNlcnMuanNvbicpO1xyXG4vLyAgICAgLy8gICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24odXBkYXRlZFVzZXJzKTtcclxuLy8gICAgIC8vICAgICB9XHJcbi8vICAgICAvLyB9IGNhdGNoIChlcnJvcikge1xyXG4vLyAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbi8vICAgICB9XHJcblxyXG4vLyB9XHJcblxyXG4vLyBhc3luYyBmdW5jdGlvbiB1cGRhdGVVc2VyKHJlcSwgcmVzKSB7XHJcbi8vICAgICB0cnkge1xyXG4vLyAgICAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkO1xyXG4vLyAgICAgY29uc3QgcGFzc3dvcmQgPSByZXEuYm9keS5wYXNzd29yZDtcclxuLy8gICAgIGNvbnN0IG1vYmlsZSA9IHJlcS5ib2R5Lm1vYmlsZTtcclxuICAgIFxyXG5cclxuLy8gICAgIGNvbnN0IGFsbFVzZXJzID0gYXdhaXQgcmVhZEpTT04oJ3V0aWxzL3VzZXJzLmpzb24nKTtcclxuXHJcbi8vICAgICAgICAgdmFyIGVkaXQgPSBmYWxzZTtcclxuXHJcbi8vICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxVc2Vycy5sZW5ndGg7IGkrKykge1xyXG4vLyAgICAgICAgICAgICB2YXIgY3VyclVzZXIgPSBhbGxVc2Vyc1tpXTtcclxuLy8gICAgICAgICAgICAgaWYgKGN1cnJVc2VyLmlkID09IGlkKXtcclxuLy8gICAgICAgICAgICAgICAgIGFsbFVzZXJzW2ldLnBhc3N3b3JkID0gcGFzc3dvcmQ7XHJcbi8vICAgICAgICAgICAgICAgICBhbGxVc2Vyc1tpXS5tb2JpbGUgPSBtb2JpbGU7XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgZWRpdCA9IHRydWU7XHJcbi8vICAgICAgICAgICAgIH0gICBcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgLy9pZiBwYXNzd29yZCBleGNlZWRzIDggZGlnaXRzXHJcbi8vICAgICAgICAgaWYgKCBwYXNzd29yZC5sZW5ndGggPiA4KXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHttZXNzYWdlOiBcIlBhc3N3b3JkIHNob3VsZCBub3QgaGF2ZSBtb3JlIHRoYW4gOCBkaWdpdHMhXCJ9KTtcclxuLy8gICAgICAgICB9ICAvL2lmIHBhc3N3b3JkIGRvZXMgbm90IGNvbnNpc3Qgb2YgdXBwZXJjYXNlICBcclxuLy8gICAgICAgICBpZiAoICEvKD89LipbQS1aYS16XSkoPz0uKlshQCMkJV4mKl0pLy50ZXN0KHBhc3N3b3JkKSkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe21lc3NhZ2U6IFwiUGFzc3dvcmQgc2hvdWxkIGNvbnRhaW4gb25lIHVwcGVyIGNhc2UgbGV0dGVyIGFuZCBzcGVjaWFsIGNoYXJhY3RlciBhbmQgbXVzdCBub3QgaGF2ZSBudW1iZXJzIVwifSlcclxuLy8gICAgICAgICB9ICAgXHJcbi8vICAgICAgICAgLy8gaWYgbW9iaWxlIG51bWJlciBjb25zaXN0IG9mIGxldHRlciBcclxuLy8gICAgICAgICBpZiAoICEvXlswLTldLy50ZXN0KG1vYmlsZSkpIHtcclxuLy8gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe21lc3NhZ2U6IFwiTW9iaWxlIG51bWJlciBzaG91bGQgY29udGFpbiBvbmx5IG51bWJlcnMhXCJ9KTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgLy9pZiAgbW9iaWxlIG51bWJlciBleGNlZWRzIDggZGlnaXRzXHJcbi8vICAgICAgICAgaWYgKCBtb2JpbGUubGVuZ3RoID4gOCl7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7bWVzc2FnZTogXCJNb2JpbGUgTnVtYmVyIHNob3VsZCBub3QgaGF2ZSBtb3JlIHRoYW4gOCBkaWdpdHMgXCJ9KTtcclxuLy8gICAgICAgICB9ICBcclxuLy8gICAgICAgICAgLy9pZiB1c2VyIGRvZXMgbm90IGZpbGwgYWxsIGlucHV0IFxyXG4vLyAgICAgICAgIGlmICghbW9iaWxlIHx8ICFwYXNzd29yZCkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnQWxsIGlucHV0IGZpZWxkcyBtdXN0IGJlIGZpbGxlZCEnIH0pO1xyXG4vLyAgICAgICAgIH0gIC8vdG8gdXBkYXRlIHRoZSBwYXNzd29yZCBhbmQgbW9iaWxlICBcclxuLy8gICAgICAgICBpZiAoZWRpdCkge1xyXG4vLyAgICAgICAgICAgICBhd2FpdCBmcy53cml0ZUZpbGUoJ3V0aWxzL3VzZXJzLmpzb24nLCBKU09OLnN0cmluZ2lmeShhbGxVc2VycyksICd1dGY4Jyk7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7IG1lc3NhZ2U6ICdVc2VyIGRldGFpbHMgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHVwZGF0ZWQhJyB9KTtcclxuLy8gICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAxKS5qc29uKHsgbWVzc2FnZTogJ1VzZXIgZGV0YWlscyBpcyB1bnN1Y2Nlc3NmdWwhJyB9KTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcbiAgICBcclxuLy8gICAgIGNhdGNoIChlcnJvcikge1xyXG4vLyAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbiAgICBcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVVzZXIocmVxLCByZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgdXNlcm5hbWVUb0RlbGV0ZSA9IHJlcS5wYXJhbXMubmFtZTtcclxuICAgICAgICBjb25zdCBlbnRlcmVkUGFzc3dvcmQgPSByZXEuYm9keS5wYXNzd29yZDtcclxuXHJcbiAgICAgICAgY29uc3QgYWxsVXNlcnMgPSBhd2FpdCByZWFkSlNPTigndXRpbHMvdXNlcnMuanNvbicpO1xyXG4gICAgICAgIGNvbnN0IHVzZXJUb0RlbGV0ZUluZGV4ID0gYWxsVXNlcnMuZmluZEluZGV4KHVzZXIgPT4gdXNlci5uYW1lID09PSB1c2VybmFtZVRvRGVsZXRlKTtcclxuXHJcbiAgICAgICAgaWYgKHVzZXJUb0RlbGV0ZUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyVG9EZWxldGUgPSBhbGxVc2Vyc1t1c2VyVG9EZWxldGVJbmRleF07XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgZW50ZXJlZCBwYXNzd29yZCBtYXRjaGVzIHRoZSB1c2VyJ3MgcGFzc3dvcmRcclxuICAgICAgICAgICAgaWYgKGVudGVyZWRQYXNzd29yZCA9PT0gdXNlclRvRGVsZXRlLnBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgICAgICBhbGxVc2Vycy5zcGxpY2UodXNlclRvRGVsZXRlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKCd1dGlscy91c2Vycy5qc29uJywgSlNPTi5zdHJpbmdpZnkoYWxsVXNlcnMpLCAndXRmOCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogYFVzZXIgJyR7dXNlcm5hbWVUb0RlbGV0ZX0nIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5LmAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBtZXNzYWdlOiAnSW5jb3JyZWN0IHBhc3N3b3JkLiBEZWxldGlvbiBmYWlsZWQuJyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6IGBVc2VyICcke3VzZXJuYW1lVG9EZWxldGV9JyBub3QgZm91bmQuYCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICByZWFkSlNPTiwgd3JpdGVKU09OLCAvKmxvZ2luLCByZWdpc3RlciwgdXBkYXRlVXNlciwqLyBkZWxldGVVc2VyXHJcbn07XHJcbiAgICBcclxuIl0sIm1hcHBpbmdzIjoia2dIQWVZO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQWZaLEtBQU0sQ0FBRUUsSUFBSyxDQUFDLEVBQUFGLGNBQUEsR0FBQUcsQ0FBQSxNQUFHQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFDMUMsS0FBTSxDQUFBQyxFQUFFLEVBQUFMLGNBQUEsR0FBQUcsQ0FBQSxNQUFHQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUNFLFFBQVEsRUFDakMsY0FBZSxDQUFBQyxRQUFRQSxDQUFDQyxRQUFRLENBQUUsQ0FBQVIsY0FBQSxHQUFBUyxDQUFBLE1BQUFULGNBQUEsR0FBQUcsQ0FBQSxNQUM5QixHQUFJLENBQ0EsS0FBTSxDQUFBTyxJQUFJLEVBQUFWLGNBQUEsR0FBQUcsQ0FBQSxNQUFHLEtBQU0sQ0FBQUUsRUFBRSxDQUFDTSxRQUFRLENBQUNILFFBQVEsQ0FBRSxNQUFNLENBQUMsRUFBQ1IsY0FBQSxHQUFBRyxDQUFBLE1BQ2pELE1BQU8sQ0FBQVMsSUFBSSxDQUFDQyxLQUFLLENBQUNILElBQUksQ0FBQyxDQUMzQixDQUFFLE1BQU9JLEdBQUcsQ0FBRSxDQUFBZCxjQUFBLEdBQUFHLENBQUEsTUFBRVksT0FBTyxDQUFDQyxLQUFLLENBQUNGLEdBQUcsQ0FBQyxDQUFDZCxjQUFBLEdBQUFHLENBQUEsTUFBQyxLQUFNLENBQUFXLEdBQUcsQ0FBRSxDQUNuRCxDQUVBLGNBQWUsQ0FBQUcsU0FBU0EsQ0FBQ0MsTUFBTSxDQUFFVixRQUFRLENBQUUsQ0FBQVIsY0FBQSxHQUFBUyxDQUFBLE1BQUFULGNBQUEsR0FBQUcsQ0FBQSxNQUN2QyxHQUFJLENBQ0EsS0FBTSxDQUFBZ0IsVUFBVSxFQUFBbkIsY0FBQSxHQUFBRyxDQUFBLE1BQUcsS0FBTSxDQUFBSSxRQUFRLENBQUNDLFFBQVEsQ0FBQyxFQUFDUixjQUFBLEdBQUFHLENBQUEsTUFDNUNnQixVQUFVLENBQUNDLElBQUksQ0FBQ0YsTUFBTSxDQUFDLENBQUNsQixjQUFBLEdBQUFHLENBQUEsT0FDeEIsS0FBTSxDQUFBRSxFQUFFLENBQUNnQixTQUFTLENBQUNiLFFBQVEsQ0FBRUksSUFBSSxDQUFDVSxTQUFTLENBQUNILFVBQVUsQ0FBQyxDQUFFLE1BQU0sQ0FBQyxDQUFDbkIsY0FBQSxHQUFBRyxDQUFBLE9BQ2pFLE1BQU8sQ0FBQWdCLFVBQVUsQ0FDckIsQ0FBRSxNQUFPTCxHQUFHLENBQUUsQ0FBQWQsY0FBQSxHQUFBRyxDQUFBLE9BQUVZLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDRixHQUFHLENBQUMsQ0FBQ2QsY0FBQSxHQUFBRyxDQUFBLE9BQUMsS0FBTSxDQUFBVyxHQUFHLENBQUUsQ0FDbkQsQ0FHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUlBLGNBQWUsQ0FBQVMsVUFBVUEsQ0FBQ0MsR0FBRyxDQUFFQyxHQUFHLENBQUUsQ0FBQXpCLGNBQUEsR0FBQVMsQ0FBQSxNQUFBVCxjQUFBLEdBQUFHLENBQUEsT0FDaEMsR0FBSSxDQUNBLEtBQU0sQ0FBQXVCLGdCQUFnQixFQUFBMUIsY0FBQSxHQUFBRyxDQUFBLE9BQUdxQixHQUFHLENBQUNHLE1BQU0sQ0FBQ0MsSUFB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