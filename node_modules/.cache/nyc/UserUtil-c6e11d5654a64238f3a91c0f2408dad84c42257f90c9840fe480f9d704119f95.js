function cov_wvj2i7uzd(){var path="C:\\Users\\Rache\\OneDrive\\Documents\\DVOPS_Projects\\final(2)\\JobFinders\\utils\\UserUtil.js";var hash="3842340d8a6efb6ed7abf25059956615b3dd42fc";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Rache\\OneDrive\\Documents\\DVOPS_Projects\\final(2)\\JobFinders\\utils\\UserUtil.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:42}},"1":{start:{line:2,column:11},end:{line:2,column:33}},"2":{start:{line:5,column:4},end:{line:8,column:52}},"3":{start:{line:6,column:21},end:{line:6,column:56}},"4":{start:{line:7,column:8},end:{line:7,column:32}},"5":{start:{line:8,column:20},end:{line:8,column:39}},"6":{start:{line:8,column:40},end:{line:8,column:50}},"7":{start:{line:12,column:4},end:{line:17,column:52}},"8":{start:{line:13,column:27},end:{line:13,column:51}},"9":{start:{line:14,column:8},end:{line:14,column:32}},"10":{start:{line:15,column:8},end:{line:15,column:73}},"11":{start:{line:16,column:8},end:{line:16,column:26}},"12":{start:{line:17,column:20},end:{line:17,column:39}},"13":{start:{line:17,column:40},end:{line:17,column:50}},"14":{start:{line:57,column:4},end:{line:120,column:5}},"15":{start:{line:58,column:22},end:{line:58,column:36}},"16":{start:{line:59,column:25},end:{line:59,column:42}},"17":{start:{line:60,column:21},end:{line:60,column:34}},"18":{start:{line:61,column:23},end:{line:61,column:38}},"19":{start:{line:64,column:8},end:{line:117,column:9}},"20":{start:{line:66,column:12},end:{line:66,column:116}},"21":{start:{line:70,column:13},end:{line:117,column:9}},"22":{start:{line:72,column:12},end:{line:72,column:96}},"23":{start:{line:76,column:13},end:{line:117,column:9}},"24":{start:{line:78,column:12},end:{line:78,column:119}},"25":{start:{line:82,column:13},end:{line:117,column:9}},"26":{start:{line:84,column:12},end:{line:84,column:127}},"27":{start:{line:88,column:13},end:{line:117,column:9}},"28":{start:{line:89,column:12},end:{line:93,column:15}},"29":{start:{line:91,column:16},end:{line:91,column:84}},"30":{start:{line:97,column:13},end:{line:117,column:9}},"31":{start:{line:98,column:12},end:{line:102,column:15}},"32":{start:{line:100,column:16},end:{line:100,column:77}},"33":{start:{line:106,column:13},end:{line:117,column:9}},"34":{start:{line:107,column:36},end:{line:107,column:72}},"35":{start:{line:109,column:12},end:{line:109,column:78}},"36":{start:{line:113,column:28},end:{line:113,column:67}},"37":{start:{line:114,column:33},end:{line:114,column:77}},"38":{start:{line:115,column:12},end:{line:115,column:54}},"39":{start:{line:119,column:8},end:{line:119,column:77}},"40":{start:{line:208,column:0},end:{line:211,column:2}}},fnMap:{"0":{name:"readJSON",decl:{start:{line:4,column:15},end:{line:4,column:23}},loc:{start:{line:4,column:34},end:{line:9,column:1}},line:4},"1":{name:"writeJSON",decl:{start:{line:11,column:15},end:{line:11,column:24}},loc:{start:{line:11,column:43},end:{line:18,column:1}},line:11},"2":{name:"register",decl:{start:{line:56,column:15},end:{line:56,column:23}},loc:{start:{line:56,column:34},end:{line:122,column:1}},line:56},"3":{name:"(anonymous_3)",decl:{start:{line:89,column:93},end:{line:89,column:94}},loc:{start:{line:89,column:105},end:{line:93,column:13}},line:89},"4":{name:"(anonymous_4)",decl:{start:{line:98,column:59},end:{line:98,column:60}},loc:{start:{line:98,column:71},end:{line:102,column:13}},line:98}},branchMap:{"0":{loc:{start:{line:64,column:8},end:{line:117,column:9}},type:"if",locations:[{start:{line:64,column:8},end:{line:117,column:9}},{start:{line:64,column:8},end:{line:117,column:9}}],line:64},"1":{loc:{start:{line:64,column:12},end:{line:64,column:74}},type:"binary-expr",locations:[{start:{line:64,column:12},end:{line:64,column:24}},{start:{line:64,column:28},end:{line:64,column:43}},{start:{line:64,column:46},end:{line:64,column:57}},{start:{line:64,column:62},end:{line:64,column:74}}],line:64},"2":{loc:{start:{line:70,column:13},end:{line:117,column:9}},type:"if",locations:[{start:{line:70,column:13},end:{line:117,column:9}},{start:{line:70,column:13},end:{line:117,column:9}}],line:70},"3":{loc:{start:{line:70,column:17},end:{line:70,column:64}},type:"binary-expr",locations:[{start:{line:70,column:17},end:{line:70,column:37}},{start:{line:70,column:41},end:{line:70,column:64}}],line:70},"4":{loc:{start:{line:76,column:13},end:{line:117,column:9}},type:"if",locations:[{start:{line:76,column:13},end:{line:117,column:9}},{start:{line:76,column:13},end:{line:117,column:9}}],line:76},"5":{loc:{start:{line:82,column:13},end:{line:117,column:9}},type:"if",locations:[{start:{line:82,column:13},end:{line:117,column:9}},{start:{line:82,column:13},end:{line:117,column:9}}],line:82},"6":{loc:{start:{line:88,column:13},end:{line:117,column:9}},type:"if",locations:[{start:{line:88,column:13},end:{line:117,column:9}},{start:{line:88,column:13},end:{line:117,column:9}}],line:88},"7":{loc:{start:{line:97,column:13},end:{line:117,column:9}},type:"if",locations:[{start:{line:97,column:13},end:{line:117,column:9}},{start:{line:97,column:13},end:{line:117,column:9}}],line:97},"8":{loc:{start:{line:97,column:17},end:{line:97,column:63}},type:"binary-expr",locations:[{start:{line:97,column:17},end:{line:97,column:42}},{start:{line:97,column:46},end:{line:97,column:63}}],line:97},"9":{loc:{start:{line:106,column:13},end:{line:117,column:9}},type:"if",locations:[{start:{line:106,column:13},end:{line:117,column:9}},{start:{line:106,column:13},end:{line:117,column:9}}],line:106},"10":{loc:{start:{line:106,column:17},end:{line:106,column:58}},type:"binary-expr",locations:[{start:{line:106,column:17},end:{line:106,column:31}},{start:{line:106,column:35},end:{line:106,column:58}}],line:106}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"3842340d8a6efb6ed7abf25059956615b3dd42fc"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_wvj2i7uzd=function(){return actualCoverage;};}return actualCoverage;}cov_wvj2i7uzd();const{User}=(cov_wvj2i7uzd().s[0]++,require('../models/User'));const fs=(cov_wvj2i7uzd().s[1]++,require('fs').promises);async function readJSON(filename){cov_wvj2i7uzd().f[0]++;cov_wvj2i7uzd().s[2]++;try{const data=(cov_wvj2i7uzd().s[3]++,await fs.readFile(filename,'utf8'));cov_wvj2i7uzd().s[4]++;return JSON.parse(data);}catch(err){cov_wvj2i7uzd().s[5]++;console.error(err);cov_wvj2i7uzd().s[6]++;throw err;}}async function writeJSON(object,filename){cov_wvj2i7uzd().f[1]++;cov_wvj2i7uzd().s[7]++;try{const allObjects=(cov_wvj2i7uzd().s[8]++,await readJSON(filename));cov_wvj2i7uzd().s[9]++;allObjects.push(object);cov_wvj2i7uzd().s[10]++;await fs.writeFile(filename,JSON.stringify(allObjects),'utf8');cov_wvj2i7uzd().s[11]++;return allObjects;}catch(err){cov_wvj2i7uzd().s[12]++;console.error(err);cov_wvj2i7uzd().s[13]++;throw err;}}// async function login(req, res) {
//     try {
//         const email = req.body.email;
//         const password = req.body.password;
//         const allUsers = await readJSON('utils/users.json');
//         var validCredentials = false;
//         for (var i = 0; i < allUsers.length; i++) {
//             var currUser = allUsers[i];
//             if (currUser.email == email && currUser.password == password)
//                 validCredentials = true;
//         } // if user type in correct email and password
//         if (validCredentials) {
//             return res.status(201).json({ message: 'Login successful!' });
//         }
//         // if user only type in correct email 
//         if (currUser.email == email) {
//             return res.status(500).json({ message: 'Invalid password!' })
//         } // if user only type in correct password 
//         if (currUser.password == password) {
//             return res.status(500).json({ message: 'Invalid email!' })
//         } //if user does not fill all input 
//         if (!email || !password) {
//             return res.status(400).json({ message: 'All input fields must be filled.' });
//         } // if user type in both wrong email and password
//         else {
//             return res.status(500).json({ message: 'Wrong Email and Password!' });
//         }
//     } catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
async function register(req,res){cov_wvj2i7uzd().f[2]++;cov_wvj2i7uzd().s[14]++;try{const email=(cov_wvj2i7uzd().s[15]++,req.body.email);const password=(cov_wvj2i7uzd().s[16]++,req.body.password);const name=(cov_wvj2i7uzd().s[17]++,req.body.name);const mobile=(cov_wvj2i7uzd().s[18]++,req.body.mobile);// Checks if all fields are filled in 
cov_wvj2i7uzd().s[19]++;if((cov_wvj2i7uzd().b[1][0]++,email==="")||(cov_wvj2i7uzd().b[1][1]++,password==="")||(cov_wvj2i7uzd().b[1][2]++,name==="")||(cov_wvj2i7uzd().b[1][3]++,mobile==="")){cov_wvj2i7uzd().b[0][0]++;cov_wvj2i7uzd().s[20]++;// Handle the validation error
return res.status(400).json({message:'Validation error: All fields are required for registration.'});}// Checks if the email string does not include the '@'and '.com' substring
else{cov_wvj2i7uzd().b[0][1]++;cov_wvj2i7uzd().s[21]++;if((cov_wvj2i7uzd().b[3][0]++,!email.includes('@'))||(cov_wvj2i7uzd().b[3][1]++,!email.includes('.com'))){cov_wvj2i7uzd().b[2][0]++;cov_wvj2i7uzd().s[22]++;// Handle the validation error
return res.status(400).json({message:'Validation error: Invalid email format.'});}// Checks if the length of the password string is less than 8 characters
else{cov_wvj2i7uzd().b[2][1]++;cov_wvj2i7uzd().s[23]++;if(password.length<8){cov_wvj2i7uzd().b[4][0]++;cov_wvj2i7uzd().s[24]++;// Handle the validation error
return res.status(400).json({message:'Validation error: Password must be at least 8 characters long.'});}// Checks if the password string contains at least one uppercase letter 
else{cov_wvj2i7uzd().b[4][1]++;cov_wvj2i7uzd().s[25]++;if(!/(?=.*[A-Z])/.test(password)){cov_wvj2i7uzd().b[5][0]++;cov_wvj2i7uzd().s[26]++;// Handle the validation error
return res.status(400).json({message:'Validation error: Password must contain at least one uppercase letter.'});}// Checks if the password string contains one special character
else{cov_wvj2i7uzd().b[5][1]++;cov_wvj2i7uzd().s[27]++;if(!/(?=.*[!@#$%^&*])/.test(password)){cov_wvj2i7uzd().b[6][0]++;cov_wvj2i7uzd().s[28]++;it('should return a validation error for missing special character in password',function(){cov_wvj2i7uzd().f[3]++;cov_wvj2i7uzd().s[29]++;// Assuming that you have access to the chai library and the data object is available
expect(data.message).to.equal('Password needs a special character');// Handle the validation error as needed
});}// Checks if the name string contains only letters and is filled in
else{cov_wvj2i7uzd().b[6][1]++;cov_wvj2i7uzd().s[30]++;if((cov_wvj2i7uzd().b[8][0]++,!/^[a-zA-Z]+$/.test(name))||(cov_wvj2i7uzd().b[8][1]++,name.length===0)){cov_wvj2i7uzd().b[7][0]++;cov_wvj2i7uzd().s[31]++;it('should return a validation error message',function(){cov_wvj2i7uzd().f[4]++;cov_wvj2i7uzd().s[32]++;// Assuming that you have access to the chai library and the data object is available
expect(data.message).to.equal('make Name with only letters');// Handle the validation error as needed
});}// Checks if the mobile string contains exactly 8 digits
else{cov_wvj2i7uzd().b[7][1]++;cov_wvj2i7uzd().s[33]++;if((cov_wvj2i7uzd().b[10][0]++,!mobile.trim())||(cov_wvj2i7uzd().b[10][1]++,!/^\d{8}$/.test(mobile))){cov_wvj2i7uzd().b[9][0]++;const validationError=(cov_wvj2i7uzd().s[34]++,{message:'Invalid Mobile Number'});// Assuming that you have access to the chai library
cov_wvj2i7uzd().s[35]++;expect(validationError.message).to.equal('Invalid Mobile Number');// Handle the validation error as needed
}else{cov_wvj2i7uzd().b[9][1]++;const newUser=(cov_wvj2i7uzd().s[36]++,new User(email,password,name,mobile));const updatedUsers=(cov_wvj2i7uzd().s[37]++,await writeJSON(newUser,'utils/users.json'));cov_wvj2i7uzd().s[38]++;return res.status(201).json(updatedUsers);}}}}}}}}catch(error){cov_wvj2i7uzd().s[39]++;return res.status(500).json({error:true,message:error.message});}}// async function updateUser(req, res) {
//     try {
//         const id = req.params.id;
//         const password = req.body.password;
//         const mobile = req.body.mobile;
//         const allUsers = await readJSON('utils/users.json');
//         var edit = false;
//         for (var i = 0; i < allUsers.length; i++) {
//             var currUser = allUsers[i];
//             if (currUser.id == id) {
//                 allUsers[i].password = password;
//                 allUsers[i].mobile = mobile;
//                 edit = true;
//             }
//         }
//         //if password exceeds 8 digits
//         if (password.length > 8) {
//             return res.status(500).json({ message: "Password should not have more than 8 digits!" });
//         }  //if password does not consist of uppercase  
//         if (!/(?=.*[A-Za-z])(?=.*[!@#$%^&*])/.test(password)) {
//             return res.status(500).json({ message: "Password should contain one upper case letter and special character and must not have numbers!" })
//         }
//         // if mobile number consist of letter 
//         if (!/^[0-9]/.test(mobile)) {
//             return res.status(500).json({ message: "Mobile number should contain only numbers!" });
//         }
//         //if  mobile number exceeds 8 digits
//         if (mobile.length > 8) {
//             return res.status(500).json({ message: "Mobile Number should not have more than 8 digits " });
//         }
//         //if user does not fill all input 
//         if (!mobile || !password) {
//             return res.status(500).json({ message: 'All input fields must be filled!' });
//         }  //to update the password and mobile  
//         if (edit) {
//             await fs.writeFile('utils/users.json', JSON.stringify(allUsers), 'utf8');
//             return res.status(201).json({ message: 'User details has been successfully updated!' });
//         }
//         else {
//             return res.status(201).json({ message: 'User details is unsuccessful!' });
//         }
//     }
//     catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
// async function deleteUser(req, res) {
//     try {
//         const usernameToDelete = req.params.name;
//         const enteredPassword = req.body.password;
//         const allUsers = await readJSON('utils/users.json');
//         const userToDeleteIndex = allUsers.findIndex(user => user.name === usernameToDelete);
//         if (userToDeleteIndex !== -1) {
//             const userToDelete = allUsers[userToDeleteIndex];
//             // Check if the entered password matches the user's password
//             if (enteredPassword === userToDelete.password) {
//                 allUsers.splice(userToDeleteIndex, 1);
//                 await fs.writeFile('utils/users.json', JSON.stringify(allUsers), 'utf8');
//                 return res.status(200).json({ message: `User '${usernameToDelete}' deleted successfully.` });
//             } else {
//                 return res.status(401).json({ message: 'Incorrect password. Deletion failed.' });
//             }
//         } else {
//             return res.status(404).json({ message: `User '${usernameToDelete}' not found.` });
//         }
//     } catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
cov_wvj2i7uzd().s[40]++;module.exports={// readJSON, writeJSON, login, register, updateUser, deleteUser
readJSON,writeJSON,register};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfd3ZqMmk3dXpkIiwiYWN0dWFsQ292ZXJhZ2UiLCJVc2VyIiwicyIsInJlcXVpcmUiLCJmcyIsInByb21pc2VzIiwicmVhZEpTT04iLCJmaWxlbmFtZSIsImYiLCJkYXRhIiwicmVhZEZpbGUiLCJKU09OIiwicGFyc2UiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJ3cml0ZUpTT04iLCJvYmplY3QiLCJhbGxPYmplY3RzIiwicHVzaCIsIndyaXRlRmlsZSIsInN0cmluZ2lmeSIsInJlZ2lzdGVyIiwicmVxIiwicmVzIiwiZW1haWwiLCJib2R5IiwicGFzc3dvcmQiLCJuYW1lIiwibW9iaWxlIiwiYiIsInN0YXR1cyIsImpzb24iLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJsZW5ndGgiLCJ0ZXN0IiwiaXQiLCJleHBlY3QiLCJ0byIsImVxdWFsIiwidHJpbSIsInZhbGlkYXRpb25FcnJvciIsIm5ld1VzZXIiLCJ1cGRhdGVkVXNlcnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVXNlclV0aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBVc2VyIH0gPSByZXF1aXJlKCcuLi9tb2RlbHMvVXNlcicpO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJykucHJvbWlzZXM7XHJcblxyXG5hc3luYyBmdW5jdGlvbiByZWFkSlNPTihmaWxlbmFtZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZnMucmVhZEZpbGUoZmlsZW5hbWUsICd1dGY4Jyk7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB0aHJvdyBlcnI7IH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gd3JpdGVKU09OKG9iamVjdCwgZmlsZW5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgYWxsT2JqZWN0cyA9IGF3YWl0IHJlYWRKU09OKGZpbGVuYW1lKTtcclxuICAgICAgICBhbGxPYmplY3RzLnB1c2gob2JqZWN0KTtcclxuICAgICAgICBhd2FpdCBmcy53cml0ZUZpbGUoZmlsZW5hbWUsIEpTT04uc3RyaW5naWZ5KGFsbE9iamVjdHMpLCAndXRmOCcpO1xyXG4gICAgICAgIHJldHVybiBhbGxPYmplY3RzO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgdGhyb3cgZXJyOyB9XHJcbn1cclxuXHJcblxyXG4vLyBhc3luYyBmdW5jdGlvbiBsb2dpbihyZXEsIHJlcykge1xyXG4vLyAgICAgdHJ5IHtcclxuLy8gICAgICAgICBjb25zdCBlbWFpbCA9IHJlcS5ib2R5LmVtYWlsO1xyXG4vLyAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxLmJvZHkucGFzc3dvcmQ7XHJcblxyXG4vLyAgICAgICAgIGNvbnN0IGFsbFVzZXJzID0gYXdhaXQgcmVhZEpTT04oJ3V0aWxzL3VzZXJzLmpzb24nKTtcclxuXHJcbi8vICAgICAgICAgdmFyIHZhbGlkQ3JlZGVudGlhbHMgPSBmYWxzZTtcclxuXHJcbi8vICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxVc2Vycy5sZW5ndGg7IGkrKykge1xyXG4vLyAgICAgICAgICAgICB2YXIgY3VyclVzZXIgPSBhbGxVc2Vyc1tpXTtcclxuLy8gICAgICAgICAgICAgaWYgKGN1cnJVc2VyLmVtYWlsID09IGVtYWlsICYmIGN1cnJVc2VyLnBhc3N3b3JkID09IHBhc3N3b3JkKVxyXG4vLyAgICAgICAgICAgICAgICAgdmFsaWRDcmVkZW50aWFscyA9IHRydWU7XHJcbi8vICAgICAgICAgfSAvLyBpZiB1c2VyIHR5cGUgaW4gY29ycmVjdCBlbWFpbCBhbmQgcGFzc3dvcmRcclxuLy8gICAgICAgICBpZiAodmFsaWRDcmVkZW50aWFscykge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyBtZXNzYWdlOiAnTG9naW4gc3VjY2Vzc2Z1bCEnIH0pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICAvLyBpZiB1c2VyIG9ubHkgdHlwZSBpbiBjb3JyZWN0IGVtYWlsIFxyXG4vLyAgICAgICAgIGlmIChjdXJyVXNlci5lbWFpbCA9PSBlbWFpbCkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCBwYXNzd29yZCEnIH0pXHJcbi8vICAgICAgICAgfSAvLyBpZiB1c2VyIG9ubHkgdHlwZSBpbiBjb3JyZWN0IHBhc3N3b3JkIFxyXG4vLyAgICAgICAgIGlmIChjdXJyVXNlci5wYXNzd29yZCA9PSBwYXNzd29yZCkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCBlbWFpbCEnIH0pXHJcbi8vICAgICAgICAgfSAvL2lmIHVzZXIgZG9lcyBub3QgZmlsbCBhbGwgaW5wdXQgXHJcbi8vICAgICAgICAgaWYgKCFlbWFpbCB8fCAhcGFzc3dvcmQpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0FsbCBpbnB1dCBmaWVsZHMgbXVzdCBiZSBmaWxsZWQuJyB9KTtcclxuLy8gICAgICAgICB9IC8vIGlmIHVzZXIgdHlwZSBpbiBib3RoIHdyb25nIGVtYWlsIGFuZCBwYXNzd29yZFxyXG4vLyAgICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnV3JvbmcgRW1haWwgYW5kIFBhc3N3b3JkIScgfSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuLy8gICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG5hc3luYyBmdW5jdGlvbiByZWdpc3RlcihyZXEsIHJlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBlbWFpbCA9IHJlcS5ib2R5LmVtYWlsO1xyXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxLmJvZHkucGFzc3dvcmQ7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IHJlcS5ib2R5Lm5hbWU7XHJcbiAgICAgICAgY29uc3QgbW9iaWxlID0gcmVxLmJvZHkubW9iaWxlO1xyXG5cclxuICAgICAgICAvLyBDaGVja3MgaWYgYWxsIGZpZWxkcyBhcmUgZmlsbGVkIGluIFxyXG4gICAgICAgIGlmIChlbWFpbCA9PT0gXCJcIiB8fCBwYXNzd29yZCA9PT0gXCJcInx8IG5hbWUgPT09IFwiXCIgIHx8IG1vYmlsZSA9PT1cIlwiKSB7XHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgdmFsaWRhdGlvbiBlcnJvclxyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnVmFsaWRhdGlvbiBlcnJvcjogQWxsIGZpZWxkcyBhcmUgcmVxdWlyZWQgZm9yIHJlZ2lzdHJhdGlvbi4nIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tzIGlmIHRoZSBlbWFpbCBzdHJpbmcgZG9lcyBub3QgaW5jbHVkZSB0aGUgJ0AnYW5kICcuY29tJyBzdWJzdHJpbmdcclxuICAgICAgICBlbHNlIGlmICghZW1haWwuaW5jbHVkZXMoJ0AnKSB8fCAhZW1haWwuaW5jbHVkZXMoJy5jb20nKSkge1xyXG4gICAgICAgICAgICAvLyBIYW5kbGUgdGhlIHZhbGlkYXRpb24gZXJyb3JcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ1ZhbGlkYXRpb24gZXJyb3I6IEludmFsaWQgZW1haWwgZm9ybWF0LicgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja3MgaWYgdGhlIGxlbmd0aCBvZiB0aGUgcGFzc3dvcmQgc3RyaW5nIGlzIGxlc3MgdGhhbiA4IGNoYXJhY3RlcnNcclxuICAgICAgICBlbHNlIGlmIChwYXNzd29yZC5sZW5ndGggPCA4KSB7XHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgdmFsaWRhdGlvbiBlcnJvclxyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnVmFsaWRhdGlvbiBlcnJvcjogUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMgbG9uZy4nIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tzIGlmIHRoZSBwYXNzd29yZCBzdHJpbmcgY29udGFpbnMgYXQgbGVhc3Qgb25lIHVwcGVyY2FzZSBsZXR0ZXIgXHJcbiAgICAgICAgZWxzZSBpZiAoIS8oPz0uKltBLVpdKS8udGVzdChwYXNzd29yZCkpIHtcclxuICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSB2YWxpZGF0aW9uIGVycm9yXHJcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdWYWxpZGF0aW9uIGVycm9yOiBQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIHVwcGVyY2FzZSBsZXR0ZXIuJyB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNrcyBpZiB0aGUgcGFzc3dvcmQgc3RyaW5nIGNvbnRhaW5zIG9uZSBzcGVjaWFsIGNoYXJhY3RlclxyXG4gICAgICAgIGVsc2UgaWYgKCEvKD89LipbIUAjJCVeJipdKS8udGVzdChwYXNzd29yZCkpIHtcclxuICAgICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYSB2YWxpZGF0aW9uIGVycm9yIGZvciBtaXNzaW5nIHNwZWNpYWwgY2hhcmFjdGVyIGluIHBhc3N3b3JkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQXNzdW1pbmcgdGhhdCB5b3UgaGF2ZSBhY2Nlc3MgdG8gdGhlIGNoYWkgbGlicmFyeSBhbmQgdGhlIGRhdGEgb2JqZWN0IGlzIGF2YWlsYWJsZVxyXG4gICAgICAgICAgICAgICAgZXhwZWN0KGRhdGEubWVzc2FnZSkudG8uZXF1YWwoJ1Bhc3N3b3JkIG5lZWRzIGEgc3BlY2lhbCBjaGFyYWN0ZXInKTtcclxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgdmFsaWRhdGlvbiBlcnJvciBhcyBuZWVkZWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja3MgaWYgdGhlIG5hbWUgc3RyaW5nIGNvbnRhaW5zIG9ubHkgbGV0dGVycyBhbmQgaXMgZmlsbGVkIGluXHJcbiAgICAgICAgZWxzZSBpZiAoIS9eW2EtekEtWl0rJC8udGVzdChuYW1lKSB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhIHZhbGlkYXRpb24gZXJyb3IgbWVzc2FnZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFzc3VtaW5nIHRoYXQgeW91IGhhdmUgYWNjZXNzIHRvIHRoZSBjaGFpIGxpYnJhcnkgYW5kIHRoZSBkYXRhIG9iamVjdCBpcyBhdmFpbGFibGVcclxuICAgICAgICAgICAgICAgIGV4cGVjdChkYXRhLm1lc3NhZ2UpLnRvLmVxdWFsKCdtYWtlIE5hbWUgd2l0aCBvbmx5IGxldHRlcnMnKTtcclxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgdmFsaWRhdGlvbiBlcnJvciBhcyBuZWVkZWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja3MgaWYgdGhlIG1vYmlsZSBzdHJpbmcgY29udGFpbnMgZXhhY3RseSA4IGRpZ2l0c1xyXG4gICAgICAgIGVsc2UgaWYgKCFtb2JpbGUudHJpbSgpIHx8ICEvXlxcZHs4fSQvLnRlc3QobW9iaWxlKSkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uRXJyb3IgPSB7IG1lc3NhZ2U6ICdJbnZhbGlkIE1vYmlsZSBOdW1iZXInIH07XHJcbiAgICAgICAgICAgIC8vIEFzc3VtaW5nIHRoYXQgeW91IGhhdmUgYWNjZXNzIHRvIHRoZSBjaGFpIGxpYnJhcnlcclxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkYXRpb25FcnJvci5tZXNzYWdlKS50by5lcXVhbCgnSW52YWxpZCBNb2JpbGUgTnVtYmVyJyk7XHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgdmFsaWRhdGlvbiBlcnJvciBhcyBuZWVkZWRcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1VzZXIgPSBuZXcgVXNlcihlbWFpbCwgcGFzc3dvcmQsIG5hbWUsIG1vYmlsZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRVc2VycyA9IGF3YWl0IHdyaXRlSlNPTihuZXdVc2VyLCAndXRpbHMvdXNlcnMuanNvbicpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24odXBkYXRlZFVzZXJzKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogdHJ1ZSwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8vIGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVVzZXIocmVxLCByZXMpIHtcclxuLy8gICAgIHRyeSB7XHJcbi8vICAgICAgICAgY29uc3QgaWQgPSByZXEucGFyYW1zLmlkO1xyXG4vLyAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxLmJvZHkucGFzc3dvcmQ7XHJcbi8vICAgICAgICAgY29uc3QgbW9iaWxlID0gcmVxLmJvZHkubW9iaWxlO1xyXG5cclxuXHJcbi8vICAgICAgICAgY29uc3QgYWxsVXNlcnMgPSBhd2FpdCByZWFkSlNPTigndXRpbHMvdXNlcnMuanNvbicpO1xyXG5cclxuLy8gICAgICAgICB2YXIgZWRpdCA9IGZhbHNlO1xyXG5cclxuLy8gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFVzZXJzLmxlbmd0aDsgaSsrKSB7XHJcbi8vICAgICAgICAgICAgIHZhciBjdXJyVXNlciA9IGFsbFVzZXJzW2ldO1xyXG4vLyAgICAgICAgICAgICBpZiAoY3VyclVzZXIuaWQgPT0gaWQpIHtcclxuLy8gICAgICAgICAgICAgICAgIGFsbFVzZXJzW2ldLnBhc3N3b3JkID0gcGFzc3dvcmQ7XHJcbi8vICAgICAgICAgICAgICAgICBhbGxVc2Vyc1tpXS5tb2JpbGUgPSBtb2JpbGU7XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgZWRpdCA9IHRydWU7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgLy9pZiBwYXNzd29yZCBleGNlZWRzIDggZGlnaXRzXHJcbi8vICAgICAgICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA+IDgpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJQYXNzd29yZCBzaG91bGQgbm90IGhhdmUgbW9yZSB0aGFuIDggZGlnaXRzIVwiIH0pO1xyXG4vLyAgICAgICAgIH0gIC8vaWYgcGFzc3dvcmQgZG9lcyBub3QgY29uc2lzdCBvZiB1cHBlcmNhc2UgIFxyXG4vLyAgICAgICAgIGlmICghLyg/PS4qW0EtWmEtel0pKD89LipbIUAjJCVeJipdKS8udGVzdChwYXNzd29yZCkpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJQYXNzd29yZCBzaG91bGQgY29udGFpbiBvbmUgdXBwZXIgY2FzZSBsZXR0ZXIgYW5kIHNwZWNpYWwgY2hhcmFjdGVyIGFuZCBtdXN0IG5vdCBoYXZlIG51bWJlcnMhXCIgfSlcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgLy8gaWYgbW9iaWxlIG51bWJlciBjb25zaXN0IG9mIGxldHRlciBcclxuLy8gICAgICAgICBpZiAoIS9eWzAtOV0vLnRlc3QobW9iaWxlKSkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBcIk1vYmlsZSBudW1iZXIgc2hvdWxkIGNvbnRhaW4gb25seSBudW1iZXJzIVwiIH0pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICAvL2lmICBtb2JpbGUgbnVtYmVyIGV4Y2VlZHMgOCBkaWdpdHNcclxuLy8gICAgICAgICBpZiAobW9iaWxlLmxlbmd0aCA+IDgpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJNb2JpbGUgTnVtYmVyIHNob3VsZCBub3QgaGF2ZSBtb3JlIHRoYW4gOCBkaWdpdHMgXCIgfSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIC8vaWYgdXNlciBkb2VzIG5vdCBmaWxsIGFsbCBpbnB1dCBcclxuLy8gICAgICAgICBpZiAoIW1vYmlsZSB8fCAhcGFzc3dvcmQpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0FsbCBpbnB1dCBmaWVsZHMgbXVzdCBiZSBmaWxsZWQhJyB9KTtcclxuLy8gICAgICAgICB9ICAvL3RvIHVwZGF0ZSB0aGUgcGFzc3dvcmQgYW5kIG1vYmlsZSAgXHJcbi8vICAgICAgICAgaWYgKGVkaXQpIHtcclxuLy8gICAgICAgICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKCd1dGlscy91c2Vycy5qc29uJywgSlNPTi5zdHJpbmdpZnkoYWxsVXNlcnMpLCAndXRmOCcpO1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyBtZXNzYWdlOiAnVXNlciBkZXRhaWxzIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSB1cGRhdGVkIScgfSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyBtZXNzYWdlOiAnVXNlciBkZXRhaWxzIGlzIHVuc3VjY2Vzc2Z1bCEnIH0pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBjYXRjaCAoZXJyb3IpIHtcclxuLy8gICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG5cclxuXHJcbi8vIGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVVzZXIocmVxLCByZXMpIHtcclxuLy8gICAgIHRyeSB7XHJcbi8vICAgICAgICAgY29uc3QgdXNlcm5hbWVUb0RlbGV0ZSA9IHJlcS5wYXJhbXMubmFtZTtcclxuLy8gICAgICAgICBjb25zdCBlbnRlcmVkUGFzc3dvcmQgPSByZXEuYm9keS5wYXNzd29yZDtcclxuXHJcbi8vICAgICAgICAgY29uc3QgYWxsVXNlcnMgPSBhd2FpdCByZWFkSlNPTigndXRpbHMvdXNlcnMuanNvbicpO1xyXG4vLyAgICAgICAgIGNvbnN0IHVzZXJUb0RlbGV0ZUluZGV4ID0gYWxsVXNlcnMuZmluZEluZGV4KHVzZXIgPT4gdXNlci5uYW1lID09PSB1c2VybmFtZVRvRGVsZXRlKTtcclxuXHJcbi8vICAgICAgICAgaWYgKHVzZXJUb0RlbGV0ZUluZGV4ICE9PSAtMSkge1xyXG4vLyAgICAgICAgICAgICBjb25zdCB1c2VyVG9EZWxldGUgPSBhbGxVc2Vyc1t1c2VyVG9EZWxldGVJbmRleF07XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgZW50ZXJlZCBwYXNzd29yZCBtYXRjaGVzIHRoZSB1c2VyJ3MgcGFzc3dvcmRcclxuLy8gICAgICAgICAgICAgaWYgKGVudGVyZWRQYXNzd29yZCA9PT0gdXNlclRvRGVsZXRlLnBhc3N3b3JkKSB7XHJcbi8vICAgICAgICAgICAgICAgICBhbGxVc2Vycy5zcGxpY2UodXNlclRvRGVsZXRlSW5kZXgsIDEpO1xyXG4vLyAgICAgICAgICAgICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKCd1dGlscy91c2Vycy5qc29uJywgSlNPTi5zdHJpbmdpZnkoYWxsVXNlcnMpLCAndXRmOCcpO1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogYFVzZXIgJyR7dXNlcm5hbWVUb0RlbGV0ZX0nIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5LmAgfSk7XHJcbi8vICAgICAgICAgICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBtZXNzYWdlOiAnSW5jb3JyZWN0IHBhc3N3b3JkLiBEZWxldGlvbiBmYWlsZWQuJyB9KTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6IGBVc2VyICcke3VzZXJuYW1lVG9EZWxldGV9JyBub3QgZm91bmQuYCB9KTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4vLyAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSk7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcblxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICAvLyByZWFkSlNPTiwgd3JpdGVKU09OLCBsb2dpbiwgcmVnaXN0ZXIsIHVwZGF0ZVVzZXIsIGRlbGV0ZVVzZXJcclxuICAgIHJlYWRKU09OLCB3cml0ZUpTT04sIHJlZ2lzdGVyXHJcbn07XHJcblxyXG4iXSwibWFwcGluZ3MiOiJrek1BZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNB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