function cov_wvj2i7uzd(){var path="C:\\Users\\Rache\\OneDrive\\Documents\\DVOPS_Projects\\final(2)\\JobFinders\\utils\\UserUtil.js";var hash="02ededba36a6f9938bd9def2fc8e9ce6f7102792";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\Rache\\OneDrive\\Documents\\DVOPS_Projects\\final(2)\\JobFinders\\utils\\UserUtil.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:42}},"1":{start:{line:2,column:11},end:{line:2,column:33}},"2":{start:{line:5,column:4},end:{line:8,column:52}},"3":{start:{line:6,column:21},end:{line:6,column:56}},"4":{start:{line:7,column:8},end:{line:7,column:32}},"5":{start:{line:8,column:20},end:{line:8,column:39}},"6":{start:{line:8,column:40},end:{line:8,column:50}},"7":{start:{line:12,column:4},end:{line:17,column:52}},"8":{start:{line:13,column:27},end:{line:13,column:51}},"9":{start:{line:14,column:8},end:{line:14,column:32}},"10":{start:{line:15,column:8},end:{line:15,column:73}},"11":{start:{line:16,column:8},end:{line:16,column:26}},"12":{start:{line:17,column:20},end:{line:17,column:39}},"13":{start:{line:17,column:40},end:{line:17,column:50}},"14":{start:{line:57,column:4},end:{line:125,column:5}},"15":{start:{line:58,column:22},end:{line:58,column:36}},"16":{start:{line:59,column:25},end:{line:59,column:42}},"17":{start:{line:60,column:21},end:{line:60,column:34}},"18":{start:{line:61,column:23},end:{line:61,column:38}},"19":{start:{line:63,column:8},end:{line:63,column:27}},"20":{start:{line:65,column:8},end:{line:65,column:30}},"21":{start:{line:66,column:8},end:{line:66,column:26}},"22":{start:{line:67,column:8},end:{line:67,column:28}},"23":{start:{line:70,column:8},end:{line:122,column:9}},"24":{start:{line:72,column:12},end:{line:72,column:116}},"25":{start:{line:76,column:13},end:{line:122,column:9}},"26":{start:{line:78,column:12},end:{line:78,column:96}},"27":{start:{line:82,column:13},end:{line:122,column:9}},"28":{start:{line:84,column:12},end:{line:84,column:119}},"29":{start:{line:111,column:13},end:{line:122,column:9}},"30":{start:{line:112,column:36},end:{line:112,column:72}},"31":{start:{line:113,column:12},end:{line:113,column:78}},"32":{start:{line:114,column:12},end:{line:114,column:57}},"33":{start:{line:118,column:28},end:{line:118,column:67}},"34":{start:{line:119,column:33},end:{line:119,column:77}},"35":{start:{line:120,column:12},end:{line:120,column:54}},"36":{start:{line:124,column:8},end:{line:124,column:77}},"37":{start:{line:213,column:0},end:{line:216,column:2}}},fnMap:{"0":{name:"readJSON",decl:{start:{line:4,column:15},end:{line:4,column:23}},loc:{start:{line:4,column:34},end:{line:9,column:1}},line:4},"1":{name:"writeJSON",decl:{start:{line:11,column:15},end:{line:11,column:24}},loc:{start:{line:11,column:43},end:{line:18,column:1}},line:11},"2":{name:"register",decl:{start:{line:56,column:15},end:{line:56,column:23}},loc:{start:{line:56,column:34},end:{line:127,column:1}},line:56}},branchMap:{"0":{loc:{start:{line:70,column:8},end:{line:122,column:9}},type:"if",locations:[{start:{line:70,column:8},end:{line:122,column:9}},{start:{line:70,column:8},end:{line:122,column:9}}],line:70},"1":{loc:{start:{line:70,column:12},end:{line:70,column:74}},type:"binary-expr",locations:[{start:{line:70,column:12},end:{line:70,column:24}},{start:{line:70,column:28},end:{line:70,column:43}},{start:{line:70,column:46},end:{line:70,column:57}},{start:{line:70,column:62},end:{line:70,column:74}}],line:70},"2":{loc:{start:{line:76,column:13},end:{line:122,column:9}},type:"if",locations:[{start:{line:76,column:13},end:{line:122,column:9}},{start:{line:76,column:13},end:{line:122,column:9}}],line:76},"3":{loc:{start:{line:76,column:17},end:{line:76,column:64}},type:"binary-expr",locations:[{start:{line:76,column:17},end:{line:76,column:37}},{start:{line:76,column:41},end:{line:76,column:64}}],line:76},"4":{loc:{start:{line:82,column:13},end:{line:122,column:9}},type:"if",locations:[{start:{line:82,column:13},end:{line:122,column:9}},{start:{line:82,column:13},end:{line:122,column:9}}],line:82},"5":{loc:{start:{line:111,column:13},end:{line:122,column:9}},type:"if",locations:[{start:{line:111,column:13},end:{line:122,column:9}},{start:{line:111,column:13},end:{line:122,column:9}}],line:111},"6":{loc:{start:{line:111,column:17},end:{line:111,column:58}},type:"binary-expr",locations:[{start:{line:111,column:17},end:{line:111,column:31}},{start:{line:111,column:35},end:{line:111,column:58}}],line:111}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"02ededba36a6f9938bd9def2fc8e9ce6f7102792"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_wvj2i7uzd=function(){return actualCoverage;};}return actualCoverage;}cov_wvj2i7uzd();const{User}=(cov_wvj2i7uzd().s[0]++,require('../models/User'));const fs=(cov_wvj2i7uzd().s[1]++,require('fs').promises);async function readJSON(filename){cov_wvj2i7uzd().f[0]++;cov_wvj2i7uzd().s[2]++;try{const data=(cov_wvj2i7uzd().s[3]++,await fs.readFile(filename,'utf8'));cov_wvj2i7uzd().s[4]++;return JSON.parse(data);}catch(err){cov_wvj2i7uzd().s[5]++;console.error(err);cov_wvj2i7uzd().s[6]++;throw err;}}async function writeJSON(object,filename){cov_wvj2i7uzd().f[1]++;cov_wvj2i7uzd().s[7]++;try{const allObjects=(cov_wvj2i7uzd().s[8]++,await readJSON(filename));cov_wvj2i7uzd().s[9]++;allObjects.push(object);cov_wvj2i7uzd().s[10]++;await fs.writeFile(filename,JSON.stringify(allObjects),'utf8');cov_wvj2i7uzd().s[11]++;return allObjects;}catch(err){cov_wvj2i7uzd().s[12]++;console.error(err);cov_wvj2i7uzd().s[13]++;throw err;}}// async function login(req, res) {
//     try {
//         const email = req.body.email;
//         const password = req.body.password;
//         const allUsers = await readJSON('utils/users.json');
//         var validCredentials = false;
//         for (var i = 0; i < allUsers.length; i++) {
//             var currUser = allUsers[i];
//             if (currUser.email == email && currUser.password == password)
//                 validCredentials = true;
//         } // if user type in correct email and password
//         if (validCredentials) {
//             return res.status(201).json({ message: 'Login successful!' });
//         }
//         // if user only type in correct email 
//         if (currUser.email == email) {
//             return res.status(500).json({ message: 'Invalid password!' })
//         } // if user only type in correct password 
//         if (currUser.password == password) {
//             return res.status(500).json({ message: 'Invalid email!' })
//         } //if user does not fill all input 
//         if (!email || !password) {
//             return res.status(400).json({ message: 'All input fields must be filled.' });
//         } // if user type in both wrong email and password
//         else {
//             return res.status(500).json({ message: 'Wrong Email and Password!' });
//         }
//     } catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
async function register(req,res){cov_wvj2i7uzd().f[2]++;cov_wvj2i7uzd().s[14]++;try{const email=(cov_wvj2i7uzd().s[15]++,req.body.email);const password=(cov_wvj2i7uzd().s[16]++,req.body.password);const name=(cov_wvj2i7uzd().s[17]++,req.body.name);const mobile=(cov_wvj2i7uzd().s[18]++,req.body.mobile);cov_wvj2i7uzd().s[19]++;console.log(email);cov_wvj2i7uzd().s[20]++;console.log(password);cov_wvj2i7uzd().s[21]++;console.log(name);cov_wvj2i7uzd().s[22]++;console.log(mobile);// Checks if all fields are filled in 
cov_wvj2i7uzd().s[23]++;if((cov_wvj2i7uzd().b[1][0]++,email==="")||(cov_wvj2i7uzd().b[1][1]++,password==="")||(cov_wvj2i7uzd().b[1][2]++,name==="")||(cov_wvj2i7uzd().b[1][3]++,mobile==="")){cov_wvj2i7uzd().b[0][0]++;cov_wvj2i7uzd().s[24]++;// Handle the validation error
return res.status(400).json({message:'Validation error: All fields are required for registration.'});}// Checks if the email string does not include the '@'and '.com' substring
else{cov_wvj2i7uzd().b[0][1]++;cov_wvj2i7uzd().s[25]++;if((cov_wvj2i7uzd().b[3][0]++,!email.includes('@'))||(cov_wvj2i7uzd().b[3][1]++,!email.includes('.com'))){cov_wvj2i7uzd().b[2][0]++;cov_wvj2i7uzd().s[26]++;// Handle the validation error
return res.status(400).json({message:'Validation error: Invalid email format.'});}// Checks if the length of the password string is less than 8 characters
else{cov_wvj2i7uzd().b[2][1]++;cov_wvj2i7uzd().s[27]++;if(password.length<8){cov_wvj2i7uzd().b[4][0]++;cov_wvj2i7uzd().s[28]++;// Handle the validation error
return res.status(400).json({message:'Validation error: Password must be at least 8 characters long.'});}// // Checks if the password string contains at least one uppercase letter 
// else if (!/(?=.*[A-Z])/.test(password)) {
//     // Handle the validation error
//     return res.status(400).json({ message: 'Validation error: Password must contain at least one uppercase letter.' });
// }
// // Checks if the password string contains one special character
// else if (!/(?=.*[!@#$%^&*])/.test(password)) {
//     it('should return a validation error for missing special character in password', function () {
//         // Assuming that you have access to the chai library and the data object is available
//         expect(data.message).to.equal('Password needs a special character');
//         // Handle the validation error as needed
//     });
// }
// // Checks if the name string contains only letters and is filled in
// else if (!/^[a-zA-Z]+$/.test(name) || name.length === 0) {
//     it('should return a validation error message', function () {
//         // Assuming that you have access to the chai library and the data object is available
//         expect(data.message).to.equal('make Name with only letters');
//         // Handle the validation error as needed
//     });
// }
else{cov_wvj2i7uzd().b[4][1]++;cov_wvj2i7uzd().s[29]++;if((cov_wvj2i7uzd().b[6][0]++,!mobile.trim())||(cov_wvj2i7uzd().b[6][1]++,!/^\d{8}$/.test(mobile))){cov_wvj2i7uzd().b[5][0]++;const validationError=(cov_wvj2i7uzd().s[30]++,{message:'Invalid Mobile Number'});cov_wvj2i7uzd().s[31]++;expect(validationError.message).to.equal('Invalid Mobile Number');cov_wvj2i7uzd().s[32]++;return res.status(400).json(validationError);}else{cov_wvj2i7uzd().b[5][1]++;const newUser=(cov_wvj2i7uzd().s[33]++,new User(name,email,password,mobile));const updatedUsers=(cov_wvj2i7uzd().s[34]++,await writeJSON(newUser,'utils/users.json'));cov_wvj2i7uzd().s[35]++;return res.status(201).json(updatedUsers);}}}}}catch(error){cov_wvj2i7uzd().s[36]++;return res.status(500).json({error:true,message:error.message});}}// async function updateUser(req, res) {
//     try {
//         const id = req.params.id;
//         const password = req.body.password;
//         const mobile = req.body.mobile;
//         const allUsers = await readJSON('utils/users.json');
//         var edit = false;
//         for (var i = 0; i < allUsers.length; i++) {
//             var currUser = allUsers[i];
//             if (currUser.id == id) {
//                 allUsers[i].password = password;
//                 allUsers[i].mobile = mobile;
//                 edit = true;
//             }
//         }
//         //if password exceeds 8 digits
//         if (password.length > 8) {
//             return res.status(500).json({ message: "Password should not have more than 8 digits!" });
//         }  //if password does not consist of uppercase  
//         if (!/(?=.*[A-Za-z])(?=.*[!@#$%^&*])/.test(password)) {
//             return res.status(500).json({ message: "Password should contain one upper case letter and special character and must not have numbers!" })
//         }
//         // if mobile number consist of letter 
//         if (!/^[0-9]/.test(mobile)) {
//             return res.status(500).json({ message: "Mobile number should contain only numbers!" });
//         }
//         //if  mobile number exceeds 8 digits
//         if (mobile.length > 8) {
//             return res.status(500).json({ message: "Mobile Number should not have more than 8 digits " });
//         }
//         //if user does not fill all input 
//         if (!mobile || !password) {
//             return res.status(500).json({ message: 'All input fields must be filled!' });
//         }  //to update the password and mobile  
//         if (edit) {
//             await fs.writeFile('utils/users.json', JSON.stringify(allUsers), 'utf8');
//             return res.status(201).json({ message: 'User details has been successfully updated!' });
//         }
//         else {
//             return res.status(201).json({ message: 'User details is unsuccessful!' });
//         }
//     }
//     catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
// async function deleteUser(req, res) {
//     try {
//         const usernameToDelete = req.params.name;
//         const enteredPassword = req.body.password;
//         const allUsers = await readJSON('utils/users.json');
//         const userToDeleteIndex = allUsers.findIndex(user => user.name === usernameToDelete);
//         if (userToDeleteIndex !== -1) {
//             const userToDelete = allUsers[userToDeleteIndex];
//             // Check if the entered password matches the user's password
//             if (enteredPassword === userToDelete.password) {
//                 allUsers.splice(userToDeleteIndex, 1);
//                 await fs.writeFile('utils/users.json', JSON.stringify(allUsers), 'utf8');
//                 return res.status(200).json({ message: `User '${usernameToDelete}' deleted successfully.` });
//             } else {
//                 return res.status(401).json({ message: 'Incorrect password. Deletion failed.' });
//             }
//         } else {
//             return res.status(404).json({ message: `User '${usernameToDelete}' not found.` });
//         }
//     } catch (error) {
//         return res.status(500).json({ message: error.message });
//     }
// }
cov_wvj2i7uzd().s[37]++;module.exports={// readJSON, writeJSON, login, register, updateUser, deleteUser
readJSON,writeJSON,register};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,